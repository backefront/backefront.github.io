<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dicas de desenvolvimento e programação</title>
  
  <subtitle>Dicas de desenvolvimento front-end, back-end, testes e muito mais!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://backefront.com.br/"/>
  <updated>2023-05-28T14:02:05.938Z</updated>
  <id>https://backefront.com.br/</id>
  
  <author>
    <name>Victor Jordan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Aumentando a Eficiência No Frontend Com React Concurrency - Utilizando O Suspense E Hooks Assíncronos</title>
    <link href="https://backefront.com.br/react-concurrency/"/>
    <id>https://backefront.com.br/react-concurrency/</id>
    <published>2023-05-28T10:16:00.000Z</published>
    <updated>2023-05-28T14:02:05.938Z</updated>
    
    <content type="html"><![CDATA[<p>O React Concurrency é uma nova funcionalidade do React que foi introduzida como parte da versão 18.<br>Ele permite que os desenvolvedores escrevam componentes assíncronos de forma mais simples e eficiente, melhorando o desempenho e a responsividade de suas aplicações.</p><h3 id="Principais-pontos-do-React-Concurrency"><a href="#Principais-pontos-do-React-Concurrency" class="headerlink" title="Principais pontos do React Concurrency:"></a>Principais pontos do React Concurrency:</h3><span id="more"></span><p><strong>Suspense</strong></p><p>O React Concurrency introduz o conceito de “Suspense”, que é uma forma de lidar com a renderização assíncrona de componentes. Com o Suspense, podemos adiar o carregamento de partes da interface do usuário que dependem de dados assíncronos, exibindo um indicador de carregamento ou uma tela de fallback enquanto os dados estão sendo buscados.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LazyComponent</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./LazyComponent&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Meu App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Carregando...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">LazyComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>Neste exemplo, estamos usando o <code>React.lazy</code> juntamente com o Suspense para carregar assincronamente o componente <code>LazyComponent</code>. Enquanto o componente está sendo carregado, exibimos uma mensagem de “Carregando…”. Isso permite que a interface do usuário continue respondendo enquanto aguarda o carregamento dos dados.</p><p><strong>Hooks assíncronos</strong></p><p>O React Concurrency também traz consigo hooks assíncronos, como o useAsync, que facilitam a realização de operações assíncronas dentro dos componentes. Esses hooks fornecem uma maneira mais intuitiva e declarativa de lidar com fluxos assíncronos, permitindo que os desenvolvedores organizem seu código de maneira mais eficiente.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useAsync</span>(<span class="params">asyncFunction</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [error, setError] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setLoading</span>(<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">asyncFunction</span>();</span><br><span class="line">        <span class="title function_">setData</span>(result);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="title function_">setError</span>(error);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fetchData</span>();</span><br><span class="line">  &#125;, [asyncFunction]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; data, loading, error &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exemplo de uso do useAsync</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> jsonData = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="keyword">return</span> jsonData;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; data, loading, error &#125; = <span class="title function_">useAsync</span>(fetchData);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Meu App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;loading ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Carregando...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : error ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Ocorreu um erro: &#123;error.message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Dados: &#123;data&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Neste exemplo, criamos o hook <code>useAsync</code> que recebe uma função assíncrona como parâmetro e lida com o estado de data, loading e error durante a execução dessa função assíncrona. O hook é responsável por chamar a função assíncrona, atualizar o estado de acordo com o resultado e tratar erros caso ocorram.</p><p>Em seguida, utilizamos o hook <code>useAsync</code> no componente App. Nele, definimos a função fetchData que faz uma requisição assíncrona para buscar os dados da API. Ao utilizar o <code>useAsync(fetchData)</code>, o hook lida automaticamente com o carregamento, exibindo a mensagem “Carregando…” enquanto os dados estão sendo buscados. Além disso, também trata possíveis erros e exibe uma mensagem de erro caso ocorra algum problema. Quando os dados são recebidos com sucesso, eles são exibidos na tela.</p><p><strong>Concurrent Mode</strong></p><p>O Concurrent Mode é uma melhoria significativa no algoritmo de reconciliação do React, que permite que as atualizações de componentes ocorram de maneira mais eficiente e priorizada. Com o <code>Concurrent Mode</code>, é possível evitar bloqueios de interface do usuário durante operações intensivas e permitir que a aplicação continue respondendo de forma suave e fluida.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Meu App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Conteúdo do aplicativo...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(rootElement).<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">React.unstable_ConcurrentMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">React.unstable_ConcurrentMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Neste exemplo, estamos utilizando o <code>ReactDOM.createRoot</code> para criar a raiz da renderização assíncrona no elemento com o ID “root”. Em seguida, utilizamos o <code>React.unstable_ConcurrentMode</code> para envolver o componente App, indicando que queremos utilizar o Concurrent Mode.</p><p>O Concurrent Mode permite que o React priorize e agende as atualizações de componentes de forma mais eficiente, melhorando a responsividade e performance da aplicação, especialmente em casos de renderização de grande escala ou com operações assíncronas intensivas.</p><p>É importante ressaltar que o <code>React.unstable_ConcurrentMode</code> ainda é marcado como “unstable” e pode estar sujeito a mudanças na API. Certifique-se de verificar a documentação oficial do React para obter as informações mais atualizadas sobre o Concurrent Mode.</p><p>Lembre-se também de importar as bibliotecas corretas (react e react-dom) e configurar seu ambiente de desenvolvimento adequadamente para suportar o Concurrent Mode.</p><p><strong>Resolução de promessas</strong></p><p>O React Concurrency também oferece uma sintaxe mais limpa e simples para a resolução de promessas. Agora, podemos usar a palavra-chave await diretamente em nossos componentes para esperar a conclusão de uma operação assíncrona, eliminando a necessidade de usar then e catch repetidamente.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setLoading</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> jsonData = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">      <span class="title function_">setData</span>(jsonData);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Erro ao buscar dados:&#x27;</span>, error);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Meu App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;fetchData&#125;</span>&gt;</span>Buscar Dados<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;loading ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Carregando...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : data ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Dados: &#123;data&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : null&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>Neste exemplo, temos um componente <code>App</code> que possui um botão “Buscar Dados” que, ao ser clicado, chama a função assíncrona <code>fetchData</code>.</p><p>Dentro da função <code>fetchData</code>, utilizamos a palavra-chave <code>await</code> para esperar a resolução da promessa retornada por <code>fetch</code>. Em seguida, transformamos a resposta em formato JSON utilizando <code>response.json()</code>. Os dados resultantes são armazenados no estado data por meio da função <code>setData</code>.</p><p>Durante o processo de busca, a variável <code>loading</code> é atualizada para <code>true</code>, permitindo exibir uma mensagem de “Carregando…”. Ao finalizar a busca e obter os dados com sucesso, a mensagem de “Carregando…” é substituída pelos dados retornados.</p><p>Caso ocorra algum erro durante a busca, a mensagem de erro é registrada no console.</p><p>Essa é uma maneira de utilizar a resolução de promessas de forma simples e direta no React, aproveitando a sintaxe limpa e legível proporcionada pelo <code>await</code>.</p><h3 id="Beneficios-do-React-Concurrency"><a href="#Beneficios-do-React-Concurrency" class="headerlink" title="Benefícios do React Concurrency:"></a>Benefícios do React Concurrency:</h3><ol><li><p>Melhor desempenho: O React Concurrency permite que as aplicações sejam mais responsivas, evitando bloqueios de interface do usuário e tornando as atualizações mais rápidas e eficientes.</p></li><li><p>Maior escalabilidade: Com o Suspense e os hooks assíncronos, podemos lidar com operações assíncronas de maneira mais organizada e escalável, facilitando o gerenciamento de estados complexos em nossos componentes.</p></li><li><p>Código mais legível: A sintaxe simplificada e declarativa fornecida pelo React Concurrency torna o código mais limpo e legível, facilitando a compreensão e a manutenção do código ao longo do tempo.</p></li></ol><p>O React Concurrency é uma adição empolgante ao ecossistema do React, trazendo melhorias significativas no desempenho e na eficiência das aplicações frontend. Com recursos como o Suspense, os hooks assíncronos e o Concurrent Mode, os desenvolvedores</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;O React Concurrency é uma nova funcionalidade do React que foi introduzida como parte da versão 18.&lt;br&gt;Ele permite que os desenvolvedores escrevam componentes assíncronos de forma mais simples e eficiente, melhorando o desempenho e a responsividade de suas aplicações.&lt;/p&gt;
&lt;h3 id=&quot;Principais-pontos-do-React-Concurrency&quot;&gt;&lt;a href=&quot;#Principais-pontos-do-React-Concurrency&quot; class=&quot;headerlink&quot; title=&quot;Principais pontos do React Concurrency:&quot;&gt;&lt;/a&gt;Principais pontos do React Concurrency:&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Axios vs. Fetch - Qual Escolher Para Suas Requisições HTTP?</title>
    <link href="https://backefront.com.br/diferenca-axios-fetch/"/>
    <id>https://backefront.com.br/diferenca-axios-fetch/</id>
    <published>2023-04-29T10:35:46.000Z</published>
    <updated>2023-05-28T14:02:05.934Z</updated>
    
    <content type="html"><![CDATA[<p>Quando se trata de fazer requisições HTTP em projetos front-end, há várias ferramentas disponíveis para os desenvolvedores. Duas das mais populares são Axios e Fetch. Ambas têm funcionalidades semelhantes, mas existem algumas diferenças importantes que podem influenciar na escolha da melhor opção para o seu projeto.</p><span id="more"></span><p>Axios é uma biblioteca JavaScript para fazer requisições HTTP que foi criada para oferecer suporte a navegadores antigos e para permitir o uso de interceptadores. Interceptadores são funções que podem ser usadas para gerenciar erros e autenticação de maneira centralizada. </p><p>O Axios também tem um sistema de cancelamento de requisições em andamento, o que pode ser útil para melhorar a performance e evitar desperdício de recursos. Além disso, o Axios oferece suporte para conversão automática de dados de resposta, o que significa que você pode receber dados formatados em JSON, XML ou outros formatos diretamente. Em termos de sintaxe, o Axios é baseado em Promises e usa um formato mais familiar para os desenvolvedores que já estão acostumados com jQuery ou AngularJS.</p><p>Fetch, por outro lado, é uma função nativa do navegador que foi introduzida no ECMAScript 6 (também conhecido como ES6 ou ES2015). Isso significa que você não precisa adicionar nenhuma biblioteca externa para fazer requisições HTTP em projetos front-end. No entanto, o Fetch não oferece suporte a navegadores antigos e não permite o uso de interceptadores. Também não há um recurso nativo de cancelamento de requisições em andamento, o que pode ser um problema para projetos que precisam lidar com muitas requisições simultâneas. </p><p>Além disso, com Fetch você precisa usar métodos adicionais para converter os dados recebidos em um formato legível. Em termos de sintaxe, o Fetch usa a sintaxe de Promises nativa do JavaScript e pode parecer mais complicado para os desenvolvedores menos experientes.</p><p>Então, qual escolher para suas requisições HTTP? A resposta depende das necessidades do seu projeto e das suas preferências pessoais. Se você precisa oferecer suporte a navegadores antigos, usar interceptadores ou converter automaticamente dados de resposta em formatos legíveis, o Axios pode ser a melhor escolha. Por outro lado, se você está trabalhando em um projeto que não precisa lidar com muitas requisições simultâneas ou se prefere a sintaxe de Promises nativa do JavaScript, o Fetch pode ser uma opção mais adequada.</p><p>Em resumo, tanto o Axios quanto o Fetch são ferramentas úteis e podem ser usadas para fazer requisições HTTP em projetos front-end. A escolha entre eles dependerá das necessidades do seu projeto e das suas preferências pessoais. É importante entender as diferenças entre as duas ferramentas para tomar a melhor decisão para o seu projeto.</p><h3 id="Resumindo-principais-diferencas"><a href="#Resumindo-principais-diferencas" class="headerlink" title="Resumindo principais diferenças"></a>Resumindo principais diferenças</h3><ul><li><p>Axios oferece suporte a navegadores antigos e permite o uso de interceptadores, o que pode ajudar na gestão de erros e autenticação. Fetch, por outro lado, é uma função nativa do navegador e não oferece esses recursos adicionais.</p></li><li><p>Axios tem um sistema de cancelamento de requisições, o que significa que você pode cancelar uma requisição em andamento se necessário. Com Fetch, não há um recurso nativo de cancelamento.</p></li><li><p>Axios tem suporte para conversão automática de dados de resposta, o que significa que você pode receber dados formatados em JSON, XML ou outros formatos diretamente. Com Fetch, você precisa usar métodos adicionais para converter os dados recebidos em um formato legível.</p></li><li><p>Em termos de sintaxe, Axios é baseado em Promises e usa um formato mais familiar para os desenvolvedores que já estão acostumados com jQuery ou AngularJS. Fetch, por outro lado, usa a sintaxe de Promises nativa do JavaScript e pode parecer mais complicado para os desenvolvedores menos experientes.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Quando se trata de fazer requisições HTTP em projetos front-end, há várias ferramentas disponíveis para os desenvolvedores. Duas das mais populares são Axios e Fetch. Ambas têm funcionalidades semelhantes, mas existem algumas diferenças importantes que podem influenciar na escolha da melhor opção para o seu projeto.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Pare De Usar Index Em Seu Map E Use randomUUID!</title>
    <link href="https://backefront.com.br/como-usar-crypto-randomUUID/"/>
    <id>https://backefront.com.br/como-usar-crypto-randomUUID/</id>
    <published>2023-03-10T13:00:00.000Z</published>
    <updated>2023-05-28T14:02:05.934Z</updated>
    
    <content type="html"><![CDATA[<p>Se você está desenvolvendo um aplicativo React que precisa exibir uma lista de itens, é provável que você tenha usado o método map() para percorrer cada elemento e exibir na tela. </p><p>Mas você já se perguntou se há uma maneira melhor de gerar chaves únicas para cada elemento em vez de usar index?<br>A resposta é <em>sim</em>, e neste post eu vou mostrar como usar a função <code>randomUUID()</code>.</p><p>Antes de começar, é importante lembrar que as chaves em um objeto em JavaScript devem ser exclusivas.<br>Usar o índice do array como chave pode causar problemas em algumas situações, como quando os elementos são adicionados ou removidos da lista.</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">&#123; itens &#125;</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;itens.map(item =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Item</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&#123;crypto.randomUUID()&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;<span class="attr">...item</span>&#125; </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Neste exemplo, estamos percorrendo cada item em <code>itens</code> usando a função map().</p><p>Para cada um, estamos gerando uma chave única usando a função <code>randomUUID()</code> de <code>crypto</code> e passando essa chave para o atributo key do componente Item.<br>Dessa forma, garantimos que cada item tenha uma chave exclusiva e evitamos problemas com elementos duplicados ou removidos da lista.</p><p>Note que o atributo key é necessário para o React identificar cada elemento da lista e realizar atualizações eficientes na interface.<br>Sem ele, o React precisaria atualizar todos os elementos da lista sempre que houvesse uma alteração, o que pode prejudicar a performance do aplicativo.</p><p>Em resumo, usar a função <code>randomUUID()</code> da biblioteca crypto é uma ótima maneira de gerar chaves exclusivas para cada elemento em uma lista no React.<br>Assim garantimos que nossa aplicação seja mais rápida evitando problemas com elementos duplicados ou removidos da lista.</p><p>Espero que este post tenha sido útil para você.<br>Se tiver alguma dúvida ou sugestão, deixe um comentário abaixo. Obrigado por ler!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Se você está desenvolvendo um aplicativo React que precisa exibir uma lista de itens, é provável que você tenha usado o método map() para percorrer cada elemento e exibir na tela. &lt;/p&gt;
&lt;p&gt;Mas você já se perguntou se há uma maneira melhor de gerar chaves únicas para cada elemento em vez de usar index?&lt;br&gt;A resposta é &lt;em&gt;sim&lt;/em&gt;, e neste post eu vou mostrar como usar a função &lt;code&gt;randomUUID()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Antes de começar, é importante lembrar que as chaves em um objeto em JavaScript devem ser exclusivas.&lt;br&gt;Usar o índice do array como chave pode causar problemas em algumas situações, como quando os elementos são adicionados ou removidos da lista.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
      <category term="React" scheme="https://backefront.com.br/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>O Que É Big O (Big O Notation)</title>
    <link href="https://backefront.com.br/o-que-e-big-o/"/>
    <id>https://backefront.com.br/o-que-e-big-o/</id>
    <published>2022-12-20T13:06:58.000Z</published>
    <updated>2023-05-28T14:02:05.938Z</updated>
    
    <content type="html"><![CDATA[<p>Big O notation é uma notação matemática usada para descrever a complexidade de um algoritmo. </p><p>É uma forma de medir quanto tempo e espaço (ou memória) um algoritmo leva para executar em função do tamanho de seus dados de entrada. Em outras palavras, a notação Big O nos diz o quanto o tempo de execução de um algoritmo aumenta à medida que a quantidade de dados aumenta.</p><p>Exemplos de notações Big O comuns incluem O(1), O(n), O(n^2) e O(log n). Aqui estão alguns exemplos de cada uma dessas notações em JavaScript:</p><span id="more"></span><h3 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h3><p>Significa que o tempo de execução é constante, independentemente do tamanho dos dados de entrada. Por exemplo:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFirstElement</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O tempo de execução desta função será sempre O(1), pois independentemente do tamanho do array, ela sempre retornará o primeiro elemento em uma única operação.</p><h3 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h3><p>Significa que o tempo de execução é proporcional ao tamanho dos dados de entrada. Por exemplo:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">containsValue</span>(<span class="params">arr, value</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === value) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O tempo de execução desta função é O(n), pois a quantidade de iterações do loop é proporcional ao tamanho do array. Se o array tiver 10 elementos, o loop será executado 10 vezes. Se o array tiver 100 elementos, o loop será executado 100 vezes.</p><h3 id="O-n-2"><a href="#O-n-2" class="headerlink" title="O(n^2)"></a>O(n^2)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printAllPairs</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i], arr[j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O tempo de execução desta função é O(n^2), pois o número de iterações do segundo loop é proporcional ao tamanho do array e o número de iterações do primeiro loop também é proporcional ao tamanho do array. Isso significa que o número total de iterações é proporcional ao quadrado do tamanho do array.</p><h3 id="O-log-n"><a href="#O-log-n" class="headerlink" title="O(log n)"></a>O(log n)</h3><p>Significa que o tempo de execução aumenta de forma logarítmica em relação ao tamanho dos dados de entrada. Isso significa que, se o tamanho dos dados de entrada aumentar 10 vezes, o tempo de execução aumentará apenas em um fator de 2. </p><p>Exemplo:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearch</span>(<span class="params">arr, value</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> end = arr.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">    <span class="keyword">const</span> middle = <span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] === value) &#123;</span><br><span class="line">      <span class="keyword">return</span> middle;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[middle] &lt; value) &#123;</span><br><span class="line">      start = middle + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      end = middle - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A função de pesquisa binária divide o array ao meio em cada iteração do loop, portanto, o número de iterações é proporcional ao logaritmo do tamanho do array. Se o array tiver 1024 elementos, a função executará o loop no máximo 10 vezes (2^10 &#x3D; 1024). Se o array tiver 1048576 elementos (2^20), a função executará o loop no máximo 20 vezes.</p><p>É importante notar que a notação Big O é uma forma de expressar a complexidade relativa de um algoritmo em relação ao tamanho dos dados de entrada. Ela não dá uma medida exata do tempo de execução em segundos ou milissegundos, mas sim uma forma de comparar a escalabilidade de diferentes algoritmos.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Big O notation é uma notação matemática usada para descrever a complexidade de um algoritmo. &lt;/p&gt;
&lt;p&gt;É uma forma de medir quanto tempo e espaço (ou memória) um algoritmo leva para executar em função do tamanho de seus dados de entrada. Em outras palavras, a notação Big O nos diz o quanto o tempo de execução de um algoritmo aumenta à medida que a quantidade de dados aumenta.&lt;/p&gt;
&lt;p&gt;Exemplos de notações Big O comuns incluem O(1), O(n), O(n^2) e O(log n). Aqui estão alguns exemplos de cada uma dessas notações em JavaScript:&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
      <category term="Algoritmos" scheme="https://backefront.com.br/tags/Algoritmos/"/>
    
  </entry>
  
  <entry>
    <title>Como Criar Um App React Com Bun</title>
    <link href="https://backefront.com.br/como-criar-app-react-com-bun/"/>
    <id>https://backefront.com.br/como-criar-app-react-com-bun/</id>
    <published>2022-12-20T11:26:06.000Z</published>
    <updated>2023-05-28T14:02:05.934Z</updated>
    
    <content type="html"><![CDATA[<p>Para criar um novo app React usando o Bun no Mac, você pode seguir os seguintes passos:</p><p>Certifique-se de que o Node.js e o npm estão instalados em seu computador.<br>O Bun é construído em cima do React e usa o npm para gerenciar pacotes e dependências.</p><p>Instale o Bun CLI (Interface de Linha de Comando) executando o seguinte comando no seu terminal:</p><span id="more"></span><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g bun-cli</span><br></pre></td></tr></table></figure><p>Depois que o Bun CLI estiver instalado, crie um novo app React executando o seguinte comando:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bun create react [app name]</span><br></pre></td></tr></table></figure><p>Isso criará um novo diretório chamado “meu-app” e gerará um app React básico dentro dele.</p><p>Navegue até o novo diretório executando:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> meu-app</span><br></pre></td></tr></table></figure><p>Inicie o servidor de desenvolvimento executando:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">start</span></span><br></pre></td></tr></table></figure><p>Isso iniciará o servidor de desenvolvimento e abrirá uma nova janela do navegador com o seu app React.</p><p>Agora você pode começar a construir o seu app modificando os arquivos no diretório src.<br>O servidor de desenvolvimento irá recarregar automaticamente o app sempre que você fizer alterações.</p><p>É isso! Agora você tem um app React básico configurado com o Bun.<br>Você pode personalizar e estender o app conforme necessário instalando pacotes npm adicionais e modificando o código no diretório src.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Para criar um novo app React usando o Bun no Mac, você pode seguir os seguintes passos:&lt;/p&gt;
&lt;p&gt;Certifique-se de que o Node.js e o npm estão instalados em seu computador.&lt;br&gt;O Bun é construído em cima do React e usa o npm para gerenciar pacotes e dependências.&lt;/p&gt;
&lt;p&gt;Instale o Bun CLI (Interface de Linha de Comando) executando o seguinte comando no seu terminal:&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
      <category term="ReactJS" scheme="https://backefront.com.br/tags/ReactJS/"/>
    
  </entry>
  
  <entry>
    <title>O Que É HOC - ReactJS</title>
    <link href="https://backefront.com.br/o-e-hoc-react/"/>
    <id>https://backefront.com.br/o-e-hoc-react/</id>
    <published>2022-12-20T11:06:58.000Z</published>
    <updated>2023-05-28T14:02:05.938Z</updated>
    
    <content type="html"><![CDATA[<p>HOC (High Order Component) é uma técnica de programação em React que permite a criação de componentes reutilizáveis. Um HOC é uma função que toma um componente como parâmetro e retorna um novo componente que encapsula o componente original.</p><p>Por exemplo, imagine que você tenha um componente que exibe uma lista de itens e deseja adicionar a funcionalidade de paginação a esse componente. Em vez de modificar o componente original para adicionar essa funcionalidade, você pode criar um HOC que aceita o componente original como parâmetro e retorna um novo componente que já possui a funcionalidade de paginação. Dessa forma, você pode reutilizar o HOC em outros componentes sem precisar duplicar o código.</p><p>Aqui está um exemplo de como um HOC poderia ser criado em React:</p><span id="more"></span><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O HOC aceita um componente como parâmetro e retorna um novo componente</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">withPagination</span> = (<span class="params">Component</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">React</span>.<span class="property">Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">      <span class="attr">currentPage</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    handlePageChange = <span class="function">(<span class="params">page</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">currentPage</span>: page &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// O HOC passa todas as props para o componente original</span></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;<span class="attr">...this.props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">currentPage</span>=<span class="string">&#123;this.state.currentPage&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onPageChange</span>=<span class="string">&#123;this.handlePageChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O componente original</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ItemList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* Exibe a lista de itens aqui */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;/* Exibe os controles de paginação aqui */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O componente com a funcionalidade de paginação</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PagedItemList</span> = <span class="title function_">withPagination</span>(<span class="title class_">ItemList</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>O HOC é muito útil para evitar a duplicação de código e para adicionar funcionalidades adicionais a componentes sem modificar o código original. No entanto, é importante lembrar que HOCs podem aumentar a complexidade do código e torná-lo mais difícil de entender, portanto é importante usá-los de forma moderada.</p><p>Aqui está um exemplo de como um HOC poderia ser criado usando os hooks do React: </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O HOC aceita um componente como parâmetro e retorna um novo componente</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">withPagination</span> = (<span class="params">Component</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Usamos o hook useState para gerenciar o estado do componente</span></span><br><span class="line">    <span class="keyword">const</span> [currentPage, setCurrentPage] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handlePageChange</span> = (<span class="params">page</span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setCurrentPage</span>(page);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// O HOC passa todas as props para o componente original</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">currentPage</span>=<span class="string">&#123;currentPage&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onPageChange</span>=<span class="string">&#123;handlePageChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O componente original</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ItemList</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* Exibe a lista de itens aqui */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* Exibe os controles de paginação aqui */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O componente com a funcionalidade de paginação</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PagedItemList</span> = <span class="title function_">withPagination</span>(<span class="title class_">ItemList</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Neste exemplo, o HOC withPagination toma o componente ItemList como parâmetro e retorna um novo componente que gerencia o estado da página atual usando o hook useState. Ele também passa a página atual e uma função de gerenciamento da página para o componente original através de props.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HOC (High Order Component) é uma técnica de programação em React que permite a criação de componentes reutilizáveis. Um HOC é uma função que toma um componente como parâmetro e retorna um novo componente que encapsula o componente original.&lt;/p&gt;
&lt;p&gt;Por exemplo, imagine que você tenha um componente que exibe uma lista de itens e deseja adicionar a funcionalidade de paginação a esse componente. Em vez de modificar o componente original para adicionar essa funcionalidade, você pode criar um HOC que aceita o componente original como parâmetro e retorna um novo componente que já possui a funcionalidade de paginação. Dessa forma, você pode reutilizar o HOC em outros componentes sem precisar duplicar o código.&lt;/p&gt;
&lt;p&gt;Aqui está um exemplo de como um HOC poderia ser criado em React:&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="React" scheme="https://backefront.com.br/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Como Depurar Código Javascript E Identificar E Corrigir Erros Comuns</title>
    <link href="https://backefront.com.br/como-depurar-c%C3%B3digo-Javascript-identificar-corrigir-erros-comuns/"/>
    <id>https://backefront.com.br/como-depurar-código-Javascript-identificar-corrigir-erros-comuns/</id>
    <published>2022-12-19T11:26:06.000Z</published>
    <updated>2023-05-28T14:02:05.934Z</updated>
    
    <content type="html"><![CDATA[<p>Existem algumas técnicas e ferramentas que você pode usar para depurar código JavaScript e identificar e corrigir erros comuns:</p><span id="more"></span><h3 id="Verificar-a-console-do-navegador"><a href="#Verificar-a-console-do-navegador" class="headerlink" title="Verificar a console do navegador"></a>Verificar a console do navegador</h3><p>A console do navegador é uma ferramenta útil para exibir mensagens, erros e outras informações enquanto você estiver depurando o código. No Google Chrome, você pode abrir a console pressionando F12 ou selecionando “Inspecionar” na opção “Desenvolvedor” do menu de contexto. Em outros navegadores, as teclas de atalho e o local da opção “Desenvolvedor” podem variar.</p><h3 id="Usar-o-debugger"><a href="#Usar-o-debugger" class="headerlink" title="Usar o debugger"></a>Usar o debugger</h3><p>O debugger é uma ferramenta de depuração integrada ao navegador que permite pausar o código em um determinado ponto e examinar o estado da aplicação naquele momento. Você pode usar o debugger para avaliar expressões, verificar o valor de variáveis ​​e navegar pelo código fonte. Para usar o debugger, basta adicionar uma declaração “debugger” no código onde você deseja pausar a execução e pressionar F8 para continuar.</p><h3 id="Usar-a-funcao-console-log"><a href="#Usar-a-funcao-console-log" class="headerlink" title="Usar a função console.log()"></a>Usar a função console.log()</h3><p>A função console.log() permite exibir mensagens e valores de variáveis ​​na console do navegador. Você pode usar isso para ver o que está acontecendo em diferentes partes do código e verificar se os valores estão corretos.</p><h3 id="Verificar-a-sintaxe"><a href="#Verificar-a-sintaxe" class="headerlink" title="Verificar a sintaxe"></a>Verificar a sintaxe</h3><p>Erros de sintaxe são comuns em JavaScript e podem ser difíceis de detectar à primeira vista. Verifique o código cuidadosamente para garantir que todas as chaves, colchetes e parênteses estejam balanceados e que não haja erros de ortografia ou digitação.</p><h3 id="Testar-o-codigo"><a href="#Testar-o-codigo" class="headerlink" title="Testar o código"></a>Testar o código</h3><p>Depois de corrigir os erros, é importante testar o código para garantir que ele esteja funcionando corretamente. Isso pode incluir testar diferentes entradas e verificar se os resultados são os esperados.</p><p>Essas são algumas dicas gerais para ajudá-lo a depurar código JavaScript e identificar e corrigir erros comuns. Espero que isso ajude!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Existem algumas técnicas e ferramentas que você pode usar para depurar código JavaScript e identificar e corrigir erros comuns:&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Qual a Diferença Entre Cookies E Localstorage?</title>
    <link href="https://backefront.com.br/diferenca-cookies-localstorage/"/>
    <id>https://backefront.com.br/diferenca-cookies-localstorage/</id>
    <published>2022-12-16T11:20:18.000Z</published>
    <updated>2023-05-28T14:02:05.934Z</updated>
    
    <content type="html"><![CDATA[<p>Recentemente, fui questionado se eu sabia o que era cookies e localstorage e se sim, quais as diferenças entre eles.<br>Essa pergunta me pegou pois eu não sabia a fundo a diferença entre os dois.</p><p>Então fui pesquisar e trago um resumo para vocês!</p><span id="more"></span><blockquote><p>Cookies são destinados a serem lidos pelo servidor, enquanto o localStorage só pode ser lido pelo navegador. Portanto, os cookies são restritos a volumes de dados pequenos, enquanto o localStorage pode armazenar mais dados.</p></blockquote><p>Local storage e cookies são duas opções de armazenamento de dados no navegador que permitem que um site armazene informações no lado do cliente. No entanto, existem algumas diferenças importantes entre eles.</p><p>O primeiro e mais óbvio é o tamanho de armazenamento disponível. Cookies são geralmente limitados a cerca de 4KB de dados, enquanto o local storage pode armazenar até 10MB de dados por site. Isso significa que o local storage é muito mais adequado para armazenar grandes quantidades de dados, enquanto os cookies são mais adequados para pequenas quantidades de informações importantes.</p><p>Outra diferença é a forma como os dados são enviados para o servidor. Quando você faz uma solicitação a um site, os cookies são enviados junto com a solicitação, permitindo que o servidor leia os cookies e use as informações armazenadas para personalizar a resposta. No entanto, o local storage não é enviado para o servidor, o que significa que as informações armazenadas nele só podem ser lidas pelo próprio navegador.</p><p>Além disso, o local storage é armazenado de forma mais permanente do que os cookies. Os cookies geralmente têm uma data de validade e são excluídos quando essa data é atingida, enquanto o local storage fica armazenado até que seja explicitamente excluído pelo usuário ou pelo site.</p><p>Em resumo, os cookies são mais adequados para armazenar pequenas quantidades de informações importantes que precisam ser enviadas para o servidor com cada solicitação, enquanto o local storage é mais adequado para armazenar grandes quantidades de dados que precisam ser armazenados de forma mais permanente no navegador.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recentemente, fui questionado se eu sabia o que era cookies e localstorage e se sim, quais as diferenças entre eles.&lt;br&gt;Essa pergunta me pegou pois eu não sabia a fundo a diferença entre os dois.&lt;/p&gt;
&lt;p&gt;Então fui pesquisar e trago um resumo para vocês!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>O Que É Mobile First</title>
    <link href="https://backefront.com.br/o-que-e-mobile-first/"/>
    <id>https://backefront.com.br/o-que-e-mobile-first/</id>
    <published>2022-12-16T11:00:23.000Z</published>
    <updated>2023-05-28T14:02:05.938Z</updated>
    
    <content type="html"><![CDATA[<p>Mobile first é uma abordagem de design que prioriza o projeto para dispositivos móveis primeiro, em vez de projetar para desktop e depois adaptar para dispositivos móveis. Isso é importante porque cada vez mais as pessoas estão acessando a internet através de seus smartphones e tablets, e é crucial garantir que o site seja fácil de usar em dispositivos móveis.</p><span id="more"></span><p>Ao aplicar o mobile first no front-end, o design e a funcionalidade do site são pensados ​​em primeiro lugar para dispositivos móveis. Isso significa que a interface do usuário e a navegação são projetadas de maneira a serem fáceis de usar em telas pequenas, com botões de toque e outros elementos de interface ajustados para essa finalidade. O layout do site também é otimizado para se adaptar às diferentes resoluções e orientações de tela dos dispositivos móveis.</p><p>Ao projetar para dispositivos móveis primeiro, é possível garantir que o site seja fácil de usar em qualquer dispositivo, independentemente do tamanho da tela ou da resolução. Além disso, o mobile first também pode ajudar a economizar tempo e esforço no desenvolvimento, pois é mais fácil adaptar o design para desktop a partir de um layout otimizado para dispositivos móveis do que o contrário.</p><p>Para aplicar o mobile first no front-end, é importante começar projetando a interface do usuário e a navegação para dispositivos móveis. Isso inclui ajustar o tamanho e a posição dos elementos da interface para serem facilmente acessíveis com os dedos, bem como otimizar a navegação para ser fácil de usar em telas pequenas. Em seguida, é preciso otimizar o layout do site para se adaptar às diferentes resoluções e orientações de tela dos dispositivos móveis. Isso pode ser feito usando media queries e outras técnicas de design responsivo.</p><p>Em resumo, o mobile first é uma abordagem importante para o design de sites que prioriza a usabilidade em dispositivos móveis. Ao projetar para dispositivos móveis primeiro, é possível garantir que o site seja fácil de usar em qualquer dispositivo, economizando tempo e esforço no processo de desenvolvimento.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mobile first é uma abordagem de design que prioriza o projeto para dispositivos móveis primeiro, em vez de projetar para desktop e depois adaptar para dispositivos móveis. Isso é importante porque cada vez mais as pessoas estão acessando a internet através de seus smartphones e tablets, e é crucial garantir que o site seja fácil de usar em dispositivos móveis.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>Como Reutilizar CSS Com Styled Components</title>
    <link href="https://backefront.com.br/reutilizar-css-styled-components/"/>
    <id>https://backefront.com.br/reutilizar-css-styled-components/</id>
    <published>2022-11-11T10:16:00.000Z</published>
    <updated>2023-05-28T14:02:05.938Z</updated>
    
    <content type="html"><![CDATA[<p>Seguindo o conceito de <a href="https://backefront.com.br/o-que-e-conceito-dry/">DRY</a>, devemos evitar reescrever códigos repetidos<br>E o mesmo se aplica em CSS! Pensando em um cenário onde podemos ter um CSS que se aplica em vários lugares e precisamos alterar, teríamos que alterar em todos os lugares que fizemos a chamada.</p><p>E é por isso que é sempre bom termos esse tipo de código em um só lugar!</p><p>Mas você sabia que é possível criar regras CSS comuns com o Styled-components?</p><span id="more"></span><p>Para criar um estilo comum com Styled é muito simples:</p><p>Primeiro criamos nosso arquivo comum:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; css &#125; <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CommonStyles</span> = css`<span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: <span class="number">#c9c9c9</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CommonStyles</span>;</span><br></pre></td></tr></table></figure><p>Agora que temos nosso CSS criado, basta usarmos em qualquer styled nosso:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CommonStyles</span> <span class="keyword">from</span> <span class="string">&#x27;../../../styles/CommonStyles&#x27;</span>; <span class="comment">// importamos ele</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Container</span> = styled.<span class="property">section</span><span class="string">`</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;CommonStyles&#125;</span>; </span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  ...</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Muito simples e fácil criar um arquivo reutilizável de CSS, não é?</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Seguindo o conceito de &lt;a href=&quot;https://backefront.com.br/o-que-e-conceito-dry/&quot;&gt;DRY&lt;/a&gt;, devemos evitar reescrever códigos repetidos&lt;br&gt;E o mesmo se aplica em CSS! Pensando em um cenário onde podemos ter um CSS que se aplica em vários lugares e precisamos alterar, teríamos que alterar em todos os lugares que fizemos a chamada.&lt;/p&gt;
&lt;p&gt;E é por isso que é sempre bom termos esse tipo de código em um só lugar!&lt;/p&gt;
&lt;p&gt;Mas você sabia que é possível criar regras CSS comuns com o Styled-components?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
  </entry>
  
</feed>
