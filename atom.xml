<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dicas de desenvolvimento e programação</title>
  
  <subtitle>Do front-end ao back-end com dicas para você!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://backefront.com.br/"/>
  <updated>2018-11-19T15:28:05.648Z</updated>
  <id>https://backefront.com.br/</id>
  
  <author>
    <name>Igor Venturelli e Victor Jordan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Principais Códigos HTTP Que Você Precisa Conhecer!</title>
    <link href="https://backefront.com.br/principais-codigos-http/"/>
    <id>https://backefront.com.br/principais-codigos-http/</id>
    <published>2018-11-19T09:30:20.000Z</published>
    <updated>2018-11-19T15:28:05.648Z</updated>
    
    <content type="html"><![CDATA[<p>Todo desenvolvedor web com certeza já esbarrou no famoso HTTP, seja implementando uma nova API ou consumindo uma. A necessidade de conhecer, no mínimo, o básico sobre o protocolo HTTP, é obrigatório! Utilizamos praticamente em todo momento algo envolvendo o HTTP, e entender seu funcionamento e como trabalhar da melhor forma, é o que difere profissionais!</p><p>Para isso, devemos entender o funcionamento, o significado dos códigos de retorno, entender qual verbo certo utilizar em um determinado momento do desenvolvimento! Alguns posts atrás, falei um pouco sobre as principais <a href="https://backefront.com.br/diferencas-http2/">diferenças entre o HTTP1 x HTTP2</a>, se você ainda não leu, depois confere lá! </p><a id="more"></a><p>Basicamente, HTTP é um conjunto de padrões que permite que um usuário da internet possa trocar informações com o site. HTTP significa HyperText Transfer Protocol (Protocolo de Transferência de Hipertexto). O HTTP é composto basicamente por um código de status e um motivo, isto é, um significado que aquele código significa!</p><h2 id="Codigo-de-Status-e-Razao-Status-Code-and-Reason-Phrase"><a href="#Codigo-de-Status-e-Razao-Status-Code-and-Reason-Phrase" class="headerlink" title="Código de Status e Razão (Status Code and Reason Phrase)"></a>Código de Status e Razão (Status Code and Reason Phrase)</h2><p>Os códigos de retorno do protocolo (Status-Code) são basicamente um algarismo de três dígitos que é o resultado de uma tentativa de entendimento de uma requisição, isto é, sempre que você interage via HTTP, você obtém um código de retorno! O primeiro algarismo significa em qual <strong>classificação</strong> o código está contido e os últimos dois dígitos não possuem nenhuma categorização específica, servindo para diferenciar entre si o significado de cada um. </p><p>No primeiro dígito, temos cinco opções de valores, que são:</p><ul><li>1xx: Informativo – Informa que a solicitação foi aceita ou o processo continua em andamento;</li><li>2xx: Confirmação – A ação foi concluída ou entendida;</li><li>3xx: Redirecionamento – Indica que algo mais precisa ser feito ou precisou ser feito para completar a solicitação;</li><li>4xx: Erro do cliente- Indica que a solicitação não pode ser concluída ou contém a sintaxe incorreta;</li><li>5xx: Erro no servidor – O servidor falhou ao concluir a solicitação.</li></ul><p>Abaixo, temos a lista dos principais código HTTP e suas respectivas explicações!</p><table><thead><tr><th>Código Status HTTP</th><th style="text-align:center">Significado do código HTTP</th><th style="text-align:right">Explicação</th></tr></thead><tbody><tr><td>100</td><td style="text-align:center">Continue</td><td style="text-align:right">O usuário <strong>deve</strong> continuar com sua requisição.</td></tr><tr><td>200</td><td style="text-align:center">OK</td><td style="text-align:right">A requisição foi concluída com sucesso!</td></tr><tr><td>201</td><td style="text-align:center">Created</td><td style="text-align:right">A requisição foi concluída e um novo recurso foi criado com sucesso!</td></tr><tr><td>202</td><td style="text-align:center">Accepted</td><td style="text-align:right">A solicitação foi aceita para processamento, mas o processamento não foi concluído.</td></tr><tr><td>203</td><td style="text-align:center">Non-Authoritative Information</td><td style="text-align:right">O metadado retornado no header da entidade não é o conjunto definitivo disponível no servidor de origem, mas é coletada de uma cópia local ou de terceiros.</td></tr><tr><td>204</td><td style="text-align:center">No Content</td><td style="text-align:right">O servidor concluiu a solicitação, mas não precisa retornar uma entidade e pode querer retornar um metadado atualizado.</td></tr><tr><td>301</td><td style="text-align:center">Moved Permanently</td><td style="text-align:right">O recurso solicitado foi atribuído a um novo URI permanente e quaisquer referências futuras a este recurso DEVERÁ usar um dos URIs retornados.</td></tr><tr><td>305</td><td style="text-align:center">Use Proxy</td><td style="text-align:right">O recurso <strong>deve</strong> ser acessado através de um proxy.</td></tr><tr><td>400</td><td style="text-align:center">Bad Request</td><td style="text-align:right">A requisição não pôde ser entendida pelo servidor devido à sintaxe malformada.</td></tr><tr><td>401</td><td style="text-align:center">Unauthorized</td><td style="text-align:right">A requisição requer uma autenticação de usuário;</td></tr><tr><td>403</td><td style="text-align:center">Forbidden</td><td style="text-align:right">O servidor entendeu a requisição, mas está se recusando a atendê-lo</td></tr><tr><td>404</td><td style="text-align:center">Not Found</td><td style="text-align:right">O servidor não encontrou nada que corresponda a solicitação.</td></tr><tr><td>405</td><td style="text-align:center">Method Not Allowed</td><td style="text-align:right">O método especificado na requisição não é permitido para o recurso identificado.</td></tr><tr><td>500</td><td style="text-align:center">Internal Server Error</td><td style="text-align:right">O servidor encontrou uma condição inesperada que impediu de concluir a solicitação.</td></tr><tr><td>503</td><td style="text-align:center">Service Unavailable</td><td style="text-align:right">O servidor está indisponível para lidar com a requisição devido a uma manutenção ou sobrecarga no servidor.</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Todo desenvolvedor web com certeza já esbarrou no famoso HTTP, seja implementando uma nova API ou consumindo uma. A necessidade de conhecer, no mínimo, o básico sobre o protocolo HTTP, é obrigatório! Utilizamos praticamente em todo momento algo envolvendo o HTTP, e entender seu funcionamento e como trabalhar da melhor forma, é o que difere profissionais!&lt;/p&gt;
&lt;p&gt;Para isso, devemos entender o funcionamento, o significado dos códigos de retorno, entender qual verbo certo utilizar em um determinado momento do desenvolvimento! Alguns posts atrás, falei um pouco sobre as principais &lt;a href=&quot;https://backefront.com.br/diferencas-http2/&quot;&gt;diferenças entre o HTTP1 x HTTP2&lt;/a&gt;, se você ainda não leu, depois confere lá! &lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="https://backefront.com.br/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Criando Projeto Angular Com Arquivo Routing!</title>
    <link href="https://backefront.com.br/angular-routing/"/>
    <id>https://backefront.com.br/angular-routing/</id>
    <published>2018-11-12T09:34:08.000Z</published>
    <updated>2018-11-19T15:28:05.648Z</updated>
    
    <content type="html"><![CDATA[<p>O AngularCLI facilita muito na criação de projetos, com a geração de componentes, services, por linha de comando! Porém, quando executamos o comando <strong>ng new nova-aplicacao</strong>, o Angular nos fornece um projeto <strong>sem</strong> um arquivo muito importante: <code>app-routing.ts</code>.</p><p>É neste arquivo que indicamos as rotas que nossa aplicação usará e também quais componentes cada rota injetará em nosso navegador! Quando você gera um projeto apenas com esse comando, você precisa criar na mão posteriormente este mesmo arquivo para que possa adicionar suas rotas. Mas será mesmo que o nosso querido CLI não possui, nativamente, algo que possa solucionar esse problema?</p><a id="more"></a><p>Pensando neste problema, o Angular disponibilza um comando muito útil, que executamos juntamente à geração do nosso projeto! Para isso, quando for criar um novo projeto, execute o seguinte comando:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng <span class="keyword">new</span> nova-aplicacao --routing</span><br></pre></td></tr></table></figure><p>Com este parâmetro, você exige que o Angular crie o arquivo routing e já importe dentro do seu <code>app.module.ts</code> de maneira correta!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;O AngularCLI facilita muito na criação de projetos, com a geração de componentes, services, por linha de comando! Porém, quando executamos o comando &lt;strong&gt;ng new nova-aplicacao&lt;/strong&gt;, o Angular nos fornece um projeto &lt;strong&gt;sem&lt;/strong&gt; um arquivo muito importante: &lt;code&gt;app-routing.ts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;É neste arquivo que indicamos as rotas que nossa aplicação usará e também quais componentes cada rota injetará em nosso navegador! Quando você gera um projeto apenas com esse comando, você precisa criar na mão posteriormente este mesmo arquivo para que possa adicionar suas rotas. Mas será mesmo que o nosso querido CLI não possui, nativamente, algo que possa solucionar esse problema?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="Angular" scheme="https://backefront.com.br/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Como Fazer Um Filtro Em Uma Tabela Com Angular</title>
    <link href="https://backefront.com.br/filtro-tabela-angular/"/>
    <id>https://backefront.com.br/filtro-tabela-angular/</id>
    <published>2018-11-05T09:00:40.000Z</published>
    <updated>2018-11-19T15:28:05.648Z</updated>
    
    <content type="html"><![CDATA[<p>Começando uma série de melhorias que podemos fazer para trazer uma melhor experiência para o usuário, irei demonstrar como podemos fazer um filtro pelo Angular(2+) em uma tabela, de forma rápida e eficiente!<br>Este filtro percorrerá todas as colunas da tabela, procurando pelo valor que inserido dentro do input e retornar todos os resultados que correspondem! Desta forma, se tivermos os mesmos valores em colunas diferentes, aparecerá igualmente!</p><p>Iremos utilizar o componente <a href="https://www.npmjs.com/package/ng2-search-filter" target="_blank" rel="noopener">ng2-search-filter</a>, esta dependência funciona perfeitamente com Angular 2, 4+.</p><a id="more"></a><h2 id="Configurando-a-nova-dependencia"><a href="#Configurando-a-nova-dependencia" class="headerlink" title="Configurando a nova dependência"></a>Configurando a nova dependência</h2><p>Em seu terminal, dentro da pasta do seu projeto, execute o comando para instalar sua dependência:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i ng2-search-filter --save</span><br></pre></td></tr></table></figure><p>Agora, precisamos importar dentro do nosso arquivo <code>app.module.ts</code> o novo módulo! Abra este arquivo, adicione-o dentro de imports e faça o import dele no começo do arquivo, como abaixo:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpModule &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Ng2SearchPipeModule &#125; <span class="keyword">from</span> <span class="string">'ng2-search-filter'</span>; <span class="comment">// Importação</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    declarations: [</span><br><span class="line">        AppComponent</span><br><span class="line">    ],</span><br><span class="line">    imports: [</span><br><span class="line">        BrowserModule,</span><br><span class="line">        FormsModule,</span><br><span class="line">        HttpModule,</span><br><span class="line">        Ng2SearchPipeModule <span class="comment">// Nosso módulo recém instalado</span></span><br><span class="line">    ],</span><br><span class="line">    providers: [],</span><br><span class="line">    bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="Alteracao-na-tabela"><a href="#Alteracao-na-tabela" class="headerlink" title="Alteração na tabela"></a>Alteração na tabela</h2><p>Feito isso, podemos agora utilizar as funcionalidades desse módulo de filtro!<br>Adicione um <strong>input</strong> que será onde o usuário digitará o texto a ser procurado e no <strong>tr</strong>, onde contém seu <code>ng-for</code>, adicione o pipe filter com o mesmo nome que você definiu no <strong>ngModel</strong> do seu input!</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"search"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"filter"</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ... Código da table ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngFor</span>=<span class="string">"let game of games | filter:filter; let i = index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;game.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;game.genre&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Agora você possui uma tabela com filtro em todas as colunas, de forma rápida!<br>No próximo post da série, irei mostrar como criar uma tabela com paginação no front-end!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Começando uma série de melhorias que podemos fazer para trazer uma melhor experiência para o usuário, irei demonstrar como podemos fazer um filtro pelo Angular(2+) em uma tabela, de forma rápida e eficiente!&lt;br&gt;Este filtro percorrerá todas as colunas da tabela, procurando pelo valor que inserido dentro do input e retornar todos os resultados que correspondem! Desta forma, se tivermos os mesmos valores em colunas diferentes, aparecerá igualmente!&lt;/p&gt;
&lt;p&gt;Iremos utilizar o componente &lt;a href=&quot;https://www.npmjs.com/package/ng2-search-filter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ng2-search-filter&lt;/a&gt;, esta dependência funciona perfeitamente com Angular 2, 4+.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="Angular" scheme="https://backefront.com.br/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>For on - Como Fazer Uma Condição De Parada No for No Javascript</title>
    <link href="https://backefront.com.br/js-forof/"/>
    <id>https://backefront.com.br/js-forof/</id>
    <published>2018-10-29T09:36:32.000Z</published>
    <updated>2018-11-19T15:28:05.648Z</updated>
    
    <content type="html"><![CDATA[<p>Digamos que você tenha um objeto e que caso dentro desse objeto, contenha um determinado valor, deve retornar imediatamente um novo valor. Para isto, você pode pensar em utilizar um <code>for</code> com alguma condição para “quebrar” seu laço de repetição, mas por que não utilizar a declaração <code>for... of</code>?</p><p>O <strong>for of</strong> cria um loop a qual itera objetos, inclusive: Strings, Array, Map, Set. Assim como o <strong>for</strong>, <strong>forEach</strong>, o <code>for of</code> itera cada elemento porém com uma diferença que pode ser o essencial para resolver seu problema: você pode quebrar seu laço com o <strong>break</strong>.</p><a id="more"></a> <p>Para ficar mais intuitivo, vamos considerar o seguinte problema: </p><blockquote><p>Um determinado filme possui a faixa etária de 12 anos para exibição. A professora de uma determinada escola gostaria de exibir este filme para seus alunos, mas primeiro precisa verificar se todos seus alunos possuem 12 ou mais anos! Caso uma única criança tenha 11 anos, a exibição não poderá ser feita!</p></blockquote><p>No array abaixo, temos todas as idades dos alunos:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> idadeAlunos = [<span class="number">12</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">15</span>, <span class="number">11</span>];</span><br></pre></td></tr></table></figure><p>Usando o <strong>for of</strong>, podemos resolver esse problema de uma maneira rápida e elegante:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verificaIdade</span>(<span class="params">idadeAlunos</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> element <span class="keyword">of</span> idadeAlunos) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( element &lt; <span class="number">12</span> ) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Aluno menor de 12 anos!'</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> idadeAlunos = [<span class="number">12</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">15</span>, <span class="number">11</span>];</span><br><span class="line">verificaIdade(idadeAlunos);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Retorna: Aluno menor de 12 anos!</span></span><br></pre></td></tr></table></figure><p>Como podemos observar, desta vez a professora não poderá exibir o filme!<br>Neste caso, poderíamos ter usado <code>return false</code>, o que funcioria da mesma forma! A vantagem do break é quando não queremos necessariamente um retorno booleano (true/false), como exemplo, caso quisessemos armazenar o primeiro valor que corresponda com a validação feita dentro do <strong>if</strong>!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Digamos que você tenha um objeto e que caso dentro desse objeto, contenha um determinado valor, deve retornar imediatamente um novo valor. Para isto, você pode pensar em utilizar um &lt;code&gt;for&lt;/code&gt; com alguma condição para “quebrar” seu laço de repetição, mas por que não utilizar a declaração &lt;code&gt;for... of&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;O &lt;strong&gt;for of&lt;/strong&gt; cria um loop a qual itera objetos, inclusive: Strings, Array, Map, Set. Assim como o &lt;strong&gt;for&lt;/strong&gt;, &lt;strong&gt;forEach&lt;/strong&gt;, o &lt;code&gt;for of&lt;/code&gt; itera cada elemento porém com uma diferença que pode ser o essencial para resolver seu problema: você pode quebrar seu laço com o &lt;strong&gt;break&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Acessando Objetos Com Espaço No Javascript</title>
    <link href="https://backefront.com.br/object-js-caracter-especial/"/>
    <id>https://backefront.com.br/object-js-caracter-especial/</id>
    <published>2018-10-17T12:17:49.000Z</published>
    <updated>2018-11-19T15:28:05.648Z</updated>
    
    <content type="html"><![CDATA[<p>Normalmente, acessamos os valores de um objeto javascript através de “.” (ponto), por exemplo, temos o seguinte objeto: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="string">'name'</span>: <span class="string">'Victor'</span>, <span class="string">'idade'</span>: <span class="number">22</span> &#125;;</span><br></pre></td></tr></table></figure><p>Para resgatar o valor <code>name</code>, bastaria acessar usando: <code>user.name</code>, correto? Mas você sabe como acessar caso a chave do seu objeto tenha caracteres especiais ou espaços, como no exemplo abaixo?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> address = &#123; <span class="string">'Endereço'</span>: <span class="string">'Rua Nova'</span>, <span class="string">'Descrição Rua'</span>: <span class="string">'Uma rua nova'</span> &#125;;</span><br></pre></td></tr></table></figure><a id="more"></a> <p>Caso você tente acessar “<code>address.Descrição Rua</code>“, com certeza não irá conseguir, afinal, esse espaço acaba estragando tudo! Então, para acessar, você pode passar o campo que deseja acessar entre colchetes <code>[]</code>, no nosso caso, ficaria: <code>address[&#39;Descrição Rua&#39;]</code></p><p>Caso você esteja trabalhando com algum framework como Angular, quando fizesse um <strong>ngFor</strong> (ng-repeat, se estiver usando AngularJS) que percorresse esse objeto, e tentasse usar:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;user.Endereço&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>acabaria deparando-se com um erro justamente por causa do caractere especial <strong>“ç”</strong>. Para contornar este erro, você deve usar a mesma técnica de acesso, alterando para: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;user[<span class="string">"Endereço"</span>]&#125;&#125;</span><br></pre></td></tr></table></figure><p>Desta forma, você evitará erros e alcançará o resultado esperado!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Normalmente, acessamos os valores de um objeto javascript através de “.” (ponto), por exemplo, temos o seguinte objeto: &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; user = &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Victor&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;idade&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Para resgatar o valor &lt;code&gt;name&lt;/code&gt;, bastaria acessar usando: &lt;code&gt;user.name&lt;/code&gt;, correto? Mas você sabe como acessar caso a chave do seu objeto tenha caracteres especiais ou espaços, como no exemplo abaixo?&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; address = &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;Endereço&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Rua Nova&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Descrição Rua&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Uma rua nova&#39;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Alterando a Cor Do Texto Do Placeholder</title>
    <link href="https://backefront.com.br/alterar-cor-placeholder/"/>
    <id>https://backefront.com.br/alterar-cor-placeholder/</id>
    <published>2018-10-15T11:33:49.000Z</published>
    <updated>2018-11-19T15:28:05.648Z</updated>
    
    <content type="html"><![CDATA[<p>Esses dias, estava construindo um input com background-color transparente e o conteúdo que estava atrás era justamente a mesma cor que o texto do placeholder! Obviamente, não seria legal deixar assim, afinal, não dava para ler nada! Mas, como alterar a cor do placeholder de um input? Pesquisando sobre isso, me deparei com o pseudo-elemento <code>::placeholder</code>! Neste post, vou mostrar como usar esta propriedade de forma rápida e sem enrolação!</p><a id="more"></a> <h2 id="Definicao"><a href="#Definicao" class="headerlink" title="Definição"></a>Definição</h2><p>O ::placeholder permite que você personalize o texto que fica dentro do input, da forma que quiser! Para utilizar, basta adicionar o CSS desejado, semelhante a forma que você estiliza quando deseja altear o <code>hover</code>!</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Chrome/Opera/Safari */</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123; </span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Firefox 19+ */</span></span><br><span class="line"><span class="selector-pseudo">::-moz-placeholder</span> &#123; </span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* IE 10+ */</span></span><br><span class="line"><span class="selector-pseudo">:-ms-input-placeholder</span> &#123; </span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Firefox 18- */</span></span><br><span class="line"><span class="selector-pseudo">:-moz-placeholder</span> &#123; </span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Estilizacoes-suportadas"><a href="#Estilizacoes-suportadas" class="headerlink" title="Estilizações suportadas"></a>Estilizações suportadas</h3><ul><li>propriedades de fonte</li><li>color</li><li>propriedades de background</li><li>word-spacing</li><li>letter-spacing</li><li>text-decoration</li><li>vertical-align</li><li>text-transform</li><li>line-height</li><li>text-indent</li><li>opacity</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Esses dias, estava construindo um input com background-color transparente e o conteúdo que estava atrás era justamente a mesma cor que o texto do placeholder! Obviamente, não seria legal deixar assim, afinal, não dava para ler nada! Mas, como alterar a cor do placeholder de um input? Pesquisando sobre isso, me deparei com o pseudo-elemento &lt;code&gt;::placeholder&lt;/code&gt;! Neste post, vou mostrar como usar esta propriedade de forma rápida e sem enrolação!&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://backefront.com.br/tags/CSS/"/>
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>Quais as Principais Diferenças HTTP/1 E HTTP/2</title>
    <link href="https://backefront.com.br/diferencas-http2/"/>
    <id>https://backefront.com.br/diferencas-http2/</id>
    <published>2018-10-10T14:06:29.000Z</published>
    <updated>2018-11-19T15:28:05.648Z</updated>
    
    <content type="html"><![CDATA[<p>Basicamente, HTTP é um conjunto de padrões que permite que um usuário da internet possa trocar informações com o site. Desde sua primeira versão, em 1991, contamos com quatro tipos de interações HTTP, que são: GET, HEAD, PUT e POST. </p><p>O HTTP/1.1 é a terceira versão e ficou sem nova atualização por quase duas décadas, até que em 2015, com os avanços dos sites, cada vez ficando mais complexos e o surgimento de aplicações web mais poderosas, foi lançado uma nova versão, o HTTP/2, que teve foi uma evolução do protocolo SPDY. Epa, Perai! Não estávamos falando de HTTP? Que raios é esse tal de SPDY?</p><a id="more"></a> <p>SPDY (pronuncia speedy, acho que isso já diz muita coisa né?) foi um protocolo criado pelo Google em 2010, que visava melhorar como HTTP lidava com requests e responses. Seu principal foco era reduzir a latência via TCP pipelining, que é uma técnica onde várias requisições HTTPs são enviadas em uma única conexão TCP, sem ficar esperando pela respostas correspondente. E também, provia uma compressão obrigatória, que por design era GZip ou Deflate.</p><p><img src="/posts/http2-timeline.png" alt="Timeline de Evolução do HTTP"></p><h2 id="O-que-tinha-de-errado-com-HTTP-1"><a href="#O-que-tinha-de-errado-com-HTTP-1" class="headerlink" title="O que tinha de errado com HTTP/1?"></a>O que tinha de errado com HTTP/1?</h2><p>O HTTP/1 era limitado a processar apenas uma solicitação por conexão TCP, forçando os navegadores a utilizarem multiplas conexões TCP para processar múltiplas requisições simultaneamente. </p><p>Entretanto, usar várias conexões em paralelo causa congestionamento na rede, e para os navegadores trabalharem com múltiplas requisições ocupa uma grande quantidade de recurso da rede, causando uma queda na performance de outros usuários que estão tentado baixar aqueles mesmos recursos que sua aplicação/site requere.</p><h2 id="Caracteristicas-do-HTTP-2"><a href="#Caracteristicas-do-HTTP-2" class="headerlink" title="Características do HTTP/2"></a>Características do HTTP/2</h2><p>Tendo em vista que o HTTP/2 foi modelado após o SPDY, algumas features dele foram incluídas, como por exemplo, um header fixo de algoritmo de compressão (Content-Encoding) como por exemplo: gzip, compress, deflate, identity, br.</p><p>A nova versão do protocolo melhorou (e muito!) a velocidade de entrega de conteúdo e consequentemente, a experiência do usuário dentro da aplicação, podemos citar:</p><p><strong>Protocolos Binários</strong><br>Protocolos binários consomem menores quantidades de banda, são analisados de maneira mais eficiente e são menos propenso a erros, comparado com sua primeira versão do protocolo HTTP.</p><p><strong>Multiplexing</strong><br>Isso quer dizer que o HTTP/2 consegue lidar com múltiplas requisições em paralelo em uma única conexão TCP(igual ao SPDY). Como resultado, as páginas renderizam seus elementos de forma mais eficiente, rápida e elimina o problema que existia no HTTP/1 em que um elemento acabava bloqueando o outro de ser transmitido, como demonstrado na imagem abaixo.</p><p><img src="/posts/http2-lidando-requisicoes.jpg" alt="Conceito de Multiplexing - Comparação entre as duas versões do protocolo HTTP"></p><p>Graças a este conceito, alguns “<em>hacks</em> de otimização” utilizados no HTTP/1 se tornaram desnecessárias, como por exemplo, imagens sprites, concatenação e domain sharding, que consistia em dividir seus recursos em outros domínios para que o navegador baixasse mais recursos simultaneamente. </p><p><strong>Compressão no Header</strong><br>O HTTP utiliza compressão no header afim de reduzir o tamanho dos arquivos e reduzir consequentemente a sobrecarga causada pelo TCP, no início do seu carregamento, semelhante ao SPDY, porém no header você diz qual tipo de algoritmo de compressão será usado.</p><p><strong>Server push</strong><br>O Server Push tem como objetivo reduzir ainda mais as requisições, isto é, quando o usuário requisitar o HTML por exemplo, podemos enviar a resposta do CSS junto mesmo antes de ele requisitar. A explicação do Sérgio Lopes <a href="http://blog.caelum.com.br/http2-server-push-na-pratica/" target="_blank" rel="noopener">neste post sobre server push</a> explica perfeitamente com poucas palavras:</p><blockquote><p>Com uma única requisição, no HTTP/2, podem ser enviadas múltiplas respostas. Sem precisar fazer inline, sem matar o cache e de forma bastante simples.</p></blockquote><p><strong>Aumento de Segurança</strong><br>Os navegadores só conseguem trabalhar com HTTP/2 através de conexões criptografadas, aumentando então a segurança do usuário e da aplicação.</p><p><strong>Priorização de Fluxo</strong><br>O HTTP/2 permite que o cliente escolha qual a preferência de um fluxo de dados específico. Apesar do servidor não esteja vinculado para seguir essas informações, este mecanimos permite que o servidor otimize a alocação de recursos de rede com base nos requisitos do usuário.</p><h2 id="Suporte-dos-Navegadores"><a href="#Suporte-dos-Navegadores" class="headerlink" title="Suporte dos Navegadores"></a>Suporte dos Navegadores</h2><p><img src="/posts/http2-suporte-navegadores.png" alt="Suporte do HTTP/2 nos Navegadores"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Basicamente, HTTP é um conjunto de padrões que permite que um usuário da internet possa trocar informações com o site. Desde sua primeira versão, em 1991, contamos com quatro tipos de interações HTTP, que são: GET, HEAD, PUT e POST. &lt;/p&gt;
&lt;p&gt;O HTTP/1.1 é a terceira versão e ficou sem nova atualização por quase duas décadas, até que em 2015, com os avanços dos sites, cada vez ficando mais complexos e o surgimento de aplicações web mais poderosas, foi lançado uma nova versão, o HTTP/2, que teve foi uma evolução do protocolo SPDY. Epa, Perai! Não estávamos falando de HTTP? Que raios é esse tal de SPDY?&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="https://backefront.com.br/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Como Criar Environments No Angular</title>
    <link href="https://backefront.com.br/criando-outros-environments-angular/"/>
    <id>https://backefront.com.br/criando-outros-environments-angular/</id>
    <published>2018-10-08T10:57:41.000Z</published>
    <updated>2018-11-19T15:28:05.648Z</updated>
    
    <content type="html"><![CDATA[<p>Você já precisou testar sua aplicação em ambientes diferentes, com bases diferentes mas com o mesmo front, no Angular? Você poderia alterar a URL base para que sua aplicação conecte-se em outras bases, mas isso seria viável? Com isso, você poderia esquecer de voltar a variável e acabaria commitando ou cansaria de trocar a todo momento. Pensando nisso, porque não criar <em>environments</em> diferentes no Angular, um para cada tipo de base ou ambiente? </p><h2 id="Criando-um-novo-ambiente"><a href="#Criando-um-novo-ambiente" class="headerlink" title="Criando um novo ambiente"></a>Criando um novo ambiente</h2><p>Primeiramente, é necessário alterar seu arquivo <strong>angular.json</strong>, que fica dentro da raiz do seu projeto, adicionando algumas configurações do novo environment que você está configurando.<br>Dentro do seu JSON, procure por <strong>configurations</strong> e em cima de <strong>production</strong>:</p><a id="more"></a> <p><img src="/posts/environments-diferentes-onde-add.png" alt="Onde adicionar o JSON do Environment - 2018"></p><p>Adicione um novo objeto, que é do nosso ambiente de <strong>DEV</strong>: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dev"</span>: &#123;</span><br><span class="line">  <span class="string">"fileReplacements"</span>: [</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"replace"</span>: <span class="string">"src/environments/environment.prod.ts"</span>,</span><br><span class="line">  <span class="string">"with"</span>: <span class="string">"src/environments/environment.ts"</span></span><br><span class="line">&#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"optimization"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"outputHashing"</span>: <span class="string">"all"</span>,</span><br><span class="line">  <span class="string">"sourceMap"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"extractCss"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"namedChunks"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"aot"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"extractLicenses"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"vendorChunk"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"buildOptimizer"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"serviceWorker"</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>Todas estas opções definidas como <code>true</code> ou <code>false</code>, são configurações de build do Angular, onde permite que seus arquivos sejam minificados, otimizados, etc. <a href="https://github.com/angular/angular-cli/wiki/stories-application-environments" target="_blank" rel="noopener">Neste link</a>, há uma explicação mais detalhada sobre as opções de configurações de ambientes.</p><p>Feito isso, modifique a seção onde está o <em>serve</em>, adicionando uma nova configuração, apontando esse dev criado como um novo build:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"serve"</span>:</span><br><span class="line">  <span class="string">"configurations"</span>: &#123;</span><br><span class="line"><span class="string">"dev"</span>: &#123;</span><br><span class="line">  <span class="string">"browserTarget"</span>: <span class="string">"projectName:build:dev"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... restante do código</span></span><br></pre></td></tr></table></figure><p>Agora que está tudo certo, você está apto a rodar o comando para inicializar o server com o ambiente desejado! Para isto, basta rodar o comando: <strong>ng s -c dev</strong> ou  <strong>ng s –configuration=dev</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Você já precisou testar sua aplicação em ambientes diferentes, com bases diferentes mas com o mesmo front, no Angular? Você poderia alterar a URL base para que sua aplicação conecte-se em outras bases, mas isso seria viável? Com isso, você poderia esquecer de voltar a variável e acabaria commitando ou cansaria de trocar a todo momento. Pensando nisso, porque não criar &lt;em&gt;environments&lt;/em&gt; diferentes no Angular, um para cada tipo de base ou ambiente? &lt;/p&gt;
&lt;h2 id=&quot;Criando-um-novo-ambiente&quot;&gt;&lt;a href=&quot;#Criando-um-novo-ambiente&quot; class=&quot;headerlink&quot; title=&quot;Criando um novo ambiente&quot;&gt;&lt;/a&gt;Criando um novo ambiente&lt;/h2&gt;&lt;p&gt;Primeiramente, é necessário alterar seu arquivo &lt;strong&gt;angular.json&lt;/strong&gt;, que fica dentro da raiz do seu projeto, adicionando algumas configurações do novo environment que você está configurando.&lt;br&gt;Dentro do seu JSON, procure por &lt;strong&gt;configurations&lt;/strong&gt; e em cima de &lt;strong&gt;production&lt;/strong&gt;:&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="Angular" scheme="https://backefront.com.br/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Fundamentos Do Teste De Software - Falha, Defeito E Erro</title>
    <link href="https://backefront.com.br/fundamentos-teste-software/"/>
    <id>https://backefront.com.br/fundamentos-teste-software/</id>
    <published>2018-09-26T18:40:00.000Z</published>
    <updated>2018-11-19T15:28:05.648Z</updated>
    
    <content type="html"><![CDATA[<p>Até um tempinho atrás, metade dos anos 90, poucas empresas utilizava softwares o que atualmente é raro! Softwares estão presentes em quase todos os lugares, na padaria de bairro até grandes e poderosos estabelecimentos como aeroportos, bancos. E todos nós já passamos por algum tipo de falha de software como insdisponibilidade de software e sites, lentidão, etc.</p><h3 id="Quando-falhas-ocorrem"><a href="#Quando-falhas-ocorrem" class="headerlink" title="Quando falhas ocorrem"></a>Quando falhas ocorrem</h3><p>Softwares que não funcionam corretamente, podem levar a muitos problemas como prejuízos financeiros, perda de reputação, risco em relação a integridade física das pessoas, multas contratuais… E até consequências maiores como lesões corporais e mortes (softwares aeronáuticos por exemplo) e até desastres tecnológicos como um mal funcionamento de um sistema de controle de mísseis!</p><h3 id="Porque-falhas-ocorrem"><a href="#Porque-falhas-ocorrem" class="headerlink" title="Porque falhas ocorrem"></a>Porque falhas ocorrem</h3><p>Todos os produtos de desenvolvimento de software, desde a especificação e requerimentos até a documentação geral, são escritos por pessoas, e as pessoas são propensas a cometer erros, independentemente de suas experiências e qualificações. Podemos listar outros itens como:<br><a id="more"></a></p><ul><li>Pressão do tempo de entrega: acaba com que as atividades sejam feitas e entregues sem o devido cuidado</li><li>Falhas de comunicação e falta de requisitos ou mudanças</li><li>Pessoas com pouco ou sem treinamento em suas funções</li><li>Processo de desenvolvimento imaturo</li></ul><h3 id="Voce-sabe-a-diferenca-entre-erro-defeito-e-falha"><a href="#Voce-sabe-a-diferenca-entre-erro-defeito-e-falha" class="headerlink" title="Você sabe a diferença entre erro, defeito e falha?"></a>Você sabe a diferença entre erro, defeito e falha?</h3><p><strong>Erro</strong>: é uma ação humana que produz um resultado incorreto (e pode ser cometido em qualquer fase do desenvolvimento).<br><strong>Defeito</strong>: é a manifestação de um erro no software, também conhecido como <strong><em>bug</em></strong> e se executado, o defeito pode causar uma falha - É o resultado do erro cometido.<br><strong>Falha</strong>: diferença indesejável entre o observado e o esperado (defeito encontrado)</p><blockquote><p>Um software pode conter defeitos mas mesmo assim nunca falhar.<br>Falha é um evento.<br>Defeito é um estado do software causado por um erro.</p></blockquote><p><img src="/posts/Figura1_ErroFalhaDefeito.jpg" alt="Diferença entre os 3 termos apresentados"></p><p><strong>Um exemplo clássico</strong><br>Você conhece o caso da espaçonave <a href="https://pt.wikipedia.org/wiki/Mercury-Atlas_1" target="_blank" rel="noopener">Mercury</a>?<br>Vamos lá, o programa de computador a bordo da espaçonave continha a declaração escrita na linguagem de programação FORTRAN:<br><strong>Código escrito</strong>: DO 100i = 1.10<br><strong>Código esperado</strong>: DO 100i = 1,10</p><p>Basicamente, por causa de uma vírgula, a espaçonave explodiu!</p><h3 id="Como-o-teste-pode-nos-ajudar-a-construir-sofwares-melhores"><a href="#Como-o-teste-pode-nos-ajudar-a-construir-sofwares-melhores" class="headerlink" title="Como o teste pode nos ajudar a construir sofwares melhores?"></a>Como o teste pode nos ajudar a construir sofwares melhores?</h3><p>Testes rigorosos em documentos e no próprio software podem reduzir os riscos de problemas acontecerem em produção.<br><strong>Menos defeitos = menor chance do software falhar</strong><br>Testes propiciam o aumento de qualidade do software à medida que defeitos encontrados são corrigidos.<br>Ajuda a aumentar receitas das empresas desenvolvedoras de software (redução de retrabalho devido à correção de <em>bugs</em>)</p><h3 id="E-como-o-teste-consegue-nos-auxiliar-nessas-tres-questoes"><a href="#E-como-o-teste-consegue-nos-auxiliar-nessas-tres-questoes" class="headerlink" title="E como o teste consegue nos auxiliar nessas três questões?"></a>E como o teste consegue nos auxiliar nessas três questões?</h3><p>Encontrando e corrigindo defeitos antes dos software ser liberado para uso operacional!</p><p>No próximo post vamos comentar sobre Qualidade &amp; Teste e também Quanto testar?</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Até um tempinho atrás, metade dos anos 90, poucas empresas utilizava softwares o que atualmente é raro! Softwares estão presentes em quase todos os lugares, na padaria de bairro até grandes e poderosos estabelecimentos como aeroportos, bancos. E todos nós já passamos por algum tipo de falha de software como insdisponibilidade de software e sites, lentidão, etc.&lt;/p&gt;
&lt;h3 id=&quot;Quando-falhas-ocorrem&quot;&gt;&lt;a href=&quot;#Quando-falhas-ocorrem&quot; class=&quot;headerlink&quot; title=&quot;Quando falhas ocorrem&quot;&gt;&lt;/a&gt;Quando falhas ocorrem&lt;/h3&gt;&lt;p&gt;Softwares que não funcionam corretamente, podem levar a muitos problemas como prejuízos financeiros, perda de reputação, risco em relação a integridade física das pessoas, multas contratuais… E até consequências maiores como lesões corporais e mortes (softwares aeronáuticos por exemplo) e até desastres tecnológicos como um mal funcionamento de um sistema de controle de mísseis!&lt;/p&gt;
&lt;h3 id=&quot;Porque-falhas-ocorrem&quot;&gt;&lt;a href=&quot;#Porque-falhas-ocorrem&quot; class=&quot;headerlink&quot; title=&quot;Porque falhas ocorrem&quot;&gt;&lt;/a&gt;Porque falhas ocorrem&lt;/h3&gt;&lt;p&gt;Todos os produtos de desenvolvimento de software, desde a especificação e requerimentos até a documentação geral, são escritos por pessoas, e as pessoas são propensas a cometer erros, independentemente de suas experiências e qualificações. Podemos listar outros itens como:&lt;br&gt;
    
    </summary>
    
    
      <category term="Testes" scheme="https://backefront.com.br/tags/Testes/"/>
    
  </entry>
  
  <entry>
    <title>Fundamentos Do Teste De Software - Teste &amp; Qualidade E Quanto Testar?</title>
    <link href="https://backefront.com.br/teste-qualidade/"/>
    <id>https://backefront.com.br/teste-qualidade/</id>
    <published>2018-09-26T18:40:00.000Z</published>
    <updated>2018-11-19T15:28:05.648Z</updated>
    
    <content type="html"><![CDATA[<p>Teste é sinônimo de qualidade? Se testarmos o software, teremos qualidade?<br>Vamos tomar a definição de qualidade:</p><blockquote><p><strong>Qualidade</strong>: é o grau até o qual um componente, sistema ou processo, atende aos requisitos especificados e/ou às necessidades e expectativas do usuário ou consumidor.</p></blockquote><p>Tendo essa definição, podemos dizer:</p><ul><li>O teste por si só não constrói a qualidade do software</li><li>Tem a função de ajudar a medir a qualidade</li><li>Pode fornecer confiança na qualidade</li><li>Testes bem desenhados e executados reduzem os riscos de falhas</li></ul><h3 id="Avaliando-a-qualidade"><a href="#Avaliando-a-qualidade" class="headerlink" title="Avaliando a qualidade"></a>Avaliando a qualidade</h3><p><strong>Podemos afirmar que quanto menos defeitos encontrados, melhor será a qualidade do software?</strong><br><a id="more"></a><br>Não! Pois uma vez que encontramos poucos defeitos, isso pode sinificar três coisas:</p><ul><li>O software é realmente bom</li><li>O teste é fraco</li><li>O teste é fraco e o software também!<br>Sem realmente saber a qualidade dos testes, não é possível tirar conclusões claras sobre a qualidade do software!</li></ul><p><img src="/posts/Figura1_AvaliandoQualidade.jpg" alt="Avaliando a Qualidade"></p><p><strong>A qualidade custa menos!</strong></p><p><img src="/posts/Figura2_CustaMenos.jpg" alt="Custa menos"></p><p>A partir do momento em que realizamos as atividades com mais qualidade, reduzimos drasticamente o retrabalho, o custo de manutenção e chamados de suporte e obtemos um software bem estruturado que facilita novos projetos.</p><blockquote><p>Na maioria dos casos, os projetos que alcançaram as menores taxas de defeitos são também os que alcançaram os prazos mais curtos.<br>Portanto, ter qualidade é mais barato do que não ter!</p></blockquote><h3 id="Quanto-testar"><a href="#Quanto-testar" class="headerlink" title="Quanto testar?"></a>Quanto testar?</h3><p>Quando sabemos que foi o necessário, que testamos o que era preciso? Devemos testar tudo, todos os cenários e casos de teste?<br>Na verdade, não funciona assim. Não devemos testar <strong>tudo</strong>. Isso não existe! Quer ver?</p><p><img src="/posts/Figura3_QuantoTestar.jpg" alt="Quanto testar"></p><h3 id="Teste-exaustivel"><a href="#Teste-exaustivel" class="headerlink" title="Teste exaustível"></a>Teste exaustível</h3><p>É a abordagem na qual a suíte de teste abrange todas as combinações de valores e precondições de entrada.<br>É impraticável porque requer muitos recursos (pessoas), muito caro, muito tempo!</p><blockquote><p>Testadores exaustos você encontrará, testes exaustivos não!</p></blockquote><h3 id="Quanto-testar-entao"><a href="#Quanto-testar-entao" class="headerlink" title="Quanto testar então?"></a>Quanto testar então?</h3><p>Necessitamos de uma alternativa pragmática, acessível, rápida e que forneça resultados: <strong>priorização dos testes</strong>.<br>Além da avaliação de riscos nos auxiliar a definir o que testar e o que não testar, ela nos auxilia a decidir onde iniciar os testes e onde a maior carga de testes é necessária: Dessa forma, sempre tenha a seguinte regra:</p><blockquote><p>Priorizar o teste de modo que, se for necessário pará-lo, você tenha certeza de que realizou o melhor teste no tempo disponível.<br>Não comece pelos mais fáceis ou de forma aleatória e sim por onde houver um risco maior.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Teste é sinônimo de qualidade? Se testarmos o software, teremos qualidade?&lt;br&gt;Vamos tomar a definição de qualidade:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Qualidade&lt;/strong&gt;: é o grau até o qual um componente, sistema ou processo, atende aos requisitos especificados e/ou às necessidades e expectativas do usuário ou consumidor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Tendo essa definição, podemos dizer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O teste por si só não constrói a qualidade do software&lt;/li&gt;
&lt;li&gt;Tem a função de ajudar a medir a qualidade&lt;/li&gt;
&lt;li&gt;Pode fornecer confiança na qualidade&lt;/li&gt;
&lt;li&gt;Testes bem desenhados e executados reduzem os riscos de falhas&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Avaliando-a-qualidade&quot;&gt;&lt;a href=&quot;#Avaliando-a-qualidade&quot; class=&quot;headerlink&quot; title=&quot;Avaliando a qualidade&quot;&gt;&lt;/a&gt;Avaliando a qualidade&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Podemos afirmar que quanto menos defeitos encontrados, melhor será a qualidade do software?&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Testes" scheme="https://backefront.com.br/tags/Testes/"/>
    
  </entry>
  
</feed>
