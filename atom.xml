<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dicas de desenvolvimento e programação</title>
  
  <subtitle>Do front-end ao back-end com dicas para você!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://backefront.com.br/"/>
  <updated>2018-09-15T16:37:44.423Z</updated>
  <id>https://backefront.com.br/</id>
  
  <author>
    <name>Igor Venturelli e Victor Jordan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Test Driven Development - O Que É TDD?</title>
    <link href="https://backefront.com.br/tdd-o-que-e/"/>
    <id>https://backefront.com.br/tdd-o-que-e/</id>
    <published>2018-09-13T16:51:00.000Z</published>
    <updated>2018-09-15T16:37:44.423Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Desenvolvimento-Guiado-por-Testes-TDD-simples-e-pratico"><a href="#Desenvolvimento-Guiado-por-Testes-TDD-simples-e-pratico" class="headerlink" title="Desenvolvimento Guiado por Testes - TDD simples e prático!"></a>Desenvolvimento Guiado por Testes - TDD simples e prático!</h4><p>Sim, tem como: desenvolver o software baseado em testes que são escritos antes do código de produção!<br>Com certeza você já ouviu (mas nunca tentou!) A ideia é antiga e tomou força em 2003 com o lançamento do famoso livro de TDD de Kent Beck, além de ser um dos pilares do Extreme Programming (XP) também.<br>Basicamente, o TDD se baseia em pequenos ciclos de repetições, onde para cada função, um teste é criado primeiro. Esse novo teste falha, visto que não temos nada implementado ainda, assim que implementado, o teste passa.</p><h3 id="Ciclo-de-desenvolvimento"><a href="#Ciclo-de-desenvolvimento" class="headerlink" title="Ciclo de desenvolvimento"></a>Ciclo de desenvolvimento</h3><p>Definido em 3 etapas -&gt; Red, Green e Refactor. ou seja:</p><ul><li>Escrevemos um teste que de início, não passa -&gt; Red</li><li>Implementamos a funcionalidade</li><li>O teste inicial agora passa -&gt; Green</li><li>Refatoramos o código da nova implementação -&gt; Refactoring</li><li>Próximo teste!</li></ul><a id="more"></a> <p><img src="/posts/Figura1_CicloDeDesenvolvimento.jpg" alt="Ciclo de Desenvolvimento"></p><h3 id="Beneficios"><a href="#Beneficios" class="headerlink" title="Benefícios"></a>Benefícios</h3><ul><li>Rápido feedback sobre a nova implementação e outras já existentes no sistema</li><li>Código limpo, uma vez que os códigos escritos são simples para o teste passar </li><li>Com o refactoring, temos segurança porque conseguimos ver o que está afetando ou não</li><li>Maior eficácia na correção de bugs</li><li>Maior produtividade / menos bugs / menos tempo com depuradores</li><li>Modularização do código, para que sejam testáveis, mais flexíveis</li></ul><h3 id="Testes-pra-que"><a href="#Testes-pra-que" class="headerlink" title="Testes pra que?"></a>Testes pra que?</h3><p>O objetivo é a criação de uma melhoria contínua de testes e consequentemente de software.<br>Nenhum teste, seja ele automatizado ou manual, tem a capacidade de eliminar 100% dos problemas, mesmo porque as pessoas que desenvolvem os códigos são as mesmas que criam os testes, e são seres humanos por isso são passíveis de erro.<br>A questão é fazer com que o uso dos testes automatizados reduza gradativamente os problemas, e assim, tornar este processo sustentável ao longo do tempo, melhorando cada vez mais o código.</p><h3 id="E-a-documentacao"><a href="#E-a-documentacao" class="headerlink" title="E a documentação?"></a>E a documentação?</h3><p>Com tantas mudanças, a documentação em wikis, Word, papel fica desatualizada pois o custo é muito alto a cada refatoração/mudança de código. A melhor documentação e mais atualizada possível é a Suíte de Testes pois ela mostra de forma simples como está funcionando o sistema naquele exato momento. Se você percorrer os testes você entenderá o que o sistema realiza. </p><h3 id="Hello-World-do-TDD"><a href="#Hello-World-do-TDD" class="headerlink" title="Hello World do TDD"></a>Hello World do TDD</h3><p>Um exemplo bem trivial utilizando <strong>Java</strong> + <strong>Eclipse</strong> + <strong>JUnit</strong>! Nosso sisteminha será uma Calculadora com 4 operações básicas: Adição, Subtração, Multiplicação e Divisão.<br>Passos para a criação do projeto:</p><ul><li>Crie um novo projeto no Eclipse com o nome de “ArtigoTDD”;</li><li>Crie um pacote com o nome “artigotdd.calculadora.teste”.</li></ul><p>Com a estrutura criada, vamos criar nossa primeira classe: <strong>CalculadoraTeste</strong>! Sim, vamos fazer um teste em algo que ainda não foi implementado!<br>Agora, temos a classe CalculadoraTeste no pacote criado:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> artigotdd.calculadora.teste;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculadoraTeste</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Para começar, vamos pensar na soma! Como podemos testar uma soma? Simples e trivial: dados dois valores, o resultado deve ser a soma deles.<br>Então, vamos criar um método que indique este teste; Para o <strong>JUnit</strong> entender que o método é “testável”, temos a anotação “@Test” no método. Assim temos:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculadoraTeste</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deveriaSomarDoisValoresDados</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Agora que temos o método de teste, vamos mostrar a ele o que queremos. Vamos agora inserir duas variáveis e usar o método “assertEquals” do próprio <strong>JUnit</strong>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculadoraTeste</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deveriaSomarDoisValoresPassados</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> valorA = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> valorB = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> soma = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        assertEquals(<span class="number">3</span>, soma);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Feito! Queremos o resultado 3 para a soma das variáveis valorA e valorB. Acabamos de escrever o Teste e óbvio que ele não passa. Ao executar, temos a barra vermelha indicando que falhou! Mas já esperávamos pois este é o ciclo: Test-&gt;Red-&gt;Green-&gt;Refactor.</p><p><img src="/posts/Figura2_TesteFalhou.png" alt="Teste Falhou"></p><p>No nosso Trace, o JUnit indica que esperava o valor 3 porém foi encontrado o valor 0.</p><p><img src="/posts/Figura3_Trace.png" alt="Trace"></p><p>E agora o nosso objetivo é fazer o Teste passar! Colocamos agora a classe responsável pela implementação da funcionalidade:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculadoraTeste</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deveriaSomarDoisValoresPassados</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> valorA = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> valorB = <span class="number">2</span>;</span><br><span class="line">        Calculadora calculadora = <span class="keyword">new</span> Calculadora();</span><br><span class="line">        <span class="keyword">int</span> soma = calculadora.soma(valorA, valorB);</span><br><span class="line"> </span><br><span class="line">        assertEquals(<span class="number">3</span>, soma);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Mas esse código nem mesmo compila! Não criamos a classe pra depois usá-la e sim usamos a classe pra depois criá-la.<br>Criamos então a classe Calculadora e também o método “soma” nessa mesma classe, recebendo dois inteiros:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculadora</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">soma</span><span class="params">(<span class="keyword">int</span> valorA, <span class="keyword">int</span> valorB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> valorA + valorB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Rodando nosso teste: barra verde! Teste passou!</p><p><img src="/posts/Figura4_TestePassou.png" alt="Teste passou!"></p><p>Agora, a última etapa do ciclo, a <strong>refatoração</strong>!<br>Seguindo os mesmos passos anteriores, vamos criar agora o teste para a divisão, adicionando o método de Teste à nossa classe de CalculadoraTeste:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculadoraTeste</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deveriaDividirDoisValoresPassados</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> valorA = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span> valorB = <span class="number">2</span>;</span><br><span class="line">        Calculadora calculadora = <span class="keyword">new</span> Calculadora();</span><br><span class="line">        <span class="keyword">int</span> divisao = calculadora.divide(valorA, valorB);</span><br><span class="line"> </span><br><span class="line">        assertEquals(<span class="number">3</span>, divisao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Método na classe Calculadora:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">Calculadora</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> valorA, <span class="keyword">int</span> valorB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> valorA / valorB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Agora temos um Teste verde na nossa frente mesmo após a Refatoração!</p><p><img src="/posts/Figura5_TestePassouRefatoracao.png" alt="Teste passou, agora refatorado!"></p><p>Finalizando esse post, o desenvolvedor de hoje realmente tem que dominar a técnica que, apesar de parecer nova, é desde os primórdios da civilização Inca! O seu software funciona? Sim? Mas não tem testes? Então você não tem garantia alguma que ele funciona!</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Desenvolvimento-Guiado-por-Testes-TDD-simples-e-pratico&quot;&gt;&lt;a href=&quot;#Desenvolvimento-Guiado-por-Testes-TDD-simples-e-pratico&quot; class=&quot;headerlink&quot; title=&quot;Desenvolvimento Guiado por Testes - TDD simples e prático!&quot;&gt;&lt;/a&gt;Desenvolvimento Guiado por Testes - TDD simples e prático!&lt;/h4&gt;&lt;p&gt;Sim, tem como: desenvolver o software baseado em testes que são escritos antes do código de produção!&lt;br&gt;Com certeza você já ouviu (mas nunca tentou!) A ideia é antiga e tomou força em 2003 com o lançamento do famoso livro de TDD de Kent Beck, além de ser um dos pilares do Extreme Programming (XP) também.&lt;br&gt;Basicamente, o TDD se baseia em pequenos ciclos de repetições, onde para cada função, um teste é criado primeiro. Esse novo teste falha, visto que não temos nada implementado ainda, assim que implementado, o teste passa.&lt;/p&gt;
&lt;h3 id=&quot;Ciclo-de-desenvolvimento&quot;&gt;&lt;a href=&quot;#Ciclo-de-desenvolvimento&quot; class=&quot;headerlink&quot; title=&quot;Ciclo de desenvolvimento&quot;&gt;&lt;/a&gt;Ciclo de desenvolvimento&lt;/h3&gt;&lt;p&gt;Definido em 3 etapas -&amp;gt; Red, Green e Refactor. ou seja:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escrevemos um teste que de início, não passa -&amp;gt; Red&lt;/li&gt;
&lt;li&gt;Implementamos a funcionalidade&lt;/li&gt;
&lt;li&gt;O teste inicial agora passa -&amp;gt; Green&lt;/li&gt;
&lt;li&gt;Refatoramos o código da nova implementação -&amp;gt; Refactoring&lt;/li&gt;
&lt;li&gt;Próximo teste!&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Testes" scheme="https://backefront.com.br/tags/Testes/"/>
    
      <category term="SENAC" scheme="https://backefront.com.br/tags/SENAC/"/>
    
  </entry>
  
  <entry>
    <title>Como Centralizar Uma Div No Meio Da Página</title>
    <link href="https://backefront.com.br/centralizar-div-css/"/>
    <id>https://backefront.com.br/centralizar-div-css/</id>
    <published>2018-09-07T13:23:08.000Z</published>
    <updated>2018-09-07T15:46:46.462Z</updated>
    
    <content type="html"><![CDATA[<p>Centralizar um conteúdo no centro de um elemento é uma situação comum de acontecer. Existem diversas formas de fazer isso, mas nesta publicação, mostrarei como centralizar uma div utilizando o <code>flexbox</code>!</p><p>Flexbox é uma propriedade introduzida no CSS3 que tem como objetivo organizar os elementos de uma forma ágil. Esta propriedade trabalha com uma dimensão por vez, isto é, a propriedade atua como <strong>linha</strong> ou como <strong>coluna</strong></p><a id="more"></a> <h2 id="Aplicacao"><a href="#Aplicacao" class="headerlink" title="Aplicação"></a>Aplicação</h2><p>Para centralizar uma div ao meio de uma página usando flexbox, você precisa basicamente de dois elementos: um elemento <strong>pai</strong> e um elemento <strong>filho</strong>. Isso significa que o conteúdo que você deseja centralizar no meio, deve estar dentro de outro elemento. Vamos mostrar um exemplo na prática</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"pai"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"filho"</span>&gt;</span></span><br><span class="line">      Olá! Tudo bem?</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><p>A classe <strong>pai</strong> recebe as propriedades do <code>flexbox</code>, onde é configurado que o display em questão será do tipo <strong>flex</strong> e que queremos que este elemento seja tratado como uma linha, na propriedade <code>flex-flow</code> e alinhamos ao centro com <code>justify-content: center;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pai</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-flow</span>: row wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.filho</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A mágica de alinhar no centro verticalmente, está na propriedade <strong>align-self: center</strong> pois é uma propriedade usada em elementos que são filhos de outro elemento que seja flex. Com o <code>align-self</code> conseguimos alinhar o filho da forma desejada. Poderiamos usar <strong>align-self: flex-end;</strong> ou <strong>align-self: flex-start;</strong> em conjunto a esta propriedade!</p><p>Caso queira brincar um pouco, <a href="https://codepen.io/victorjordan95/pen/EebmOV" target="_blank" rel="noopener">neste link</a> eu criei um Codepen com o conteúdo alinhado ao meio, para demonstrar melhor!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Centralizar um conteúdo no centro de um elemento é uma situação comum de acontecer. Existem diversas formas de fazer isso, mas nesta publicação, mostrarei como centralizar uma div utilizando o &lt;code&gt;flexbox&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Flexbox é uma propriedade introduzida no CSS3 que tem como objetivo organizar os elementos de uma forma ágil. Esta propriedade trabalha com uma dimensão por vez, isto é, a propriedade atua como &lt;strong&gt;linha&lt;/strong&gt; ou como &lt;strong&gt;coluna&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="CSS" scheme="https://backefront.com.br/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Como Adicionar Diferentes SSH Key No Github No Mesmo Computador</title>
    <link href="https://backefront.com.br/diferentes-sshkey-mesmo-computador/"/>
    <id>https://backefront.com.br/diferentes-sshkey-mesmo-computador/</id>
    <published>2018-09-03T14:48:56.000Z</published>
    <updated>2018-09-08T18:26:55.071Z</updated>
    
    <content type="html"><![CDATA[<p>Digamos que você esteja trabalhando em dois projetos diferentes, com github <strong>diferentes</strong> e você precisa adicionar a <code>SSH Key</code> em ambos repositórios. Ao tentar adicionar sua deploy key, você tenta colocar aquela chave que usa no outro projeto mas ao clicar em salvar, se depara com o seguinte erro:</p><p><img src="/posts/Error - Key is already in use.png" alt="Erro de Chave em uso"></p><p>Para resolver esse problema, você deveria adicionar outra ssh key sem perder a que já está em uso. Mas como?</p><a id="more"></a> <h2 id="Criando-a-nova-SSH"><a href="#Criando-a-nova-SSH" class="headerlink" title="Criando a nova SSH"></a>Criando a nova SSH</h2><p>Gere uma nova key, com o comando de sempre, com um porém, altere o <strong>nome</strong> de como ela será salva, como na imagem abaixo:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//Comando para gerar nova ssh</span><br><span class="line">ssh-keygen -t rsa -C &quot;seuemail@email.com&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/Gerando SSH.png" alt="Gerando uma nova SSH Key, alterando o nome do arquivo"></p><p>Como pode ser visto, alterei a opção default de criação de uma SSH, que é <strong>id_rsa</strong> para <strong>id_rsa_trabalho</strong>. Essa vai ser a chave que adicionarei no outro projeto.</p><h2 id="Criando-arquivo-de-configuracao"><a href="#Criando-arquivo-de-configuracao" class="headerlink" title="Criando arquivo de configuração"></a>Criando arquivo de configuração</h2><p>Para usar duas ssh keys diferentes, você deve acessar a pasta onde se encontra a atual e criar um arquivo de configuração:</p><p>No Windows<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nul&gt;config</span><br></pre></td></tr></table></figure></p><p>Linux/Mac<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch config</span><br></pre></td></tr></table></figure></p><p>Assim que gerar esse arquivo config, você deve editá-lo, usando seu editor preferido, adicionando as seguintes configurações:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Host trabalho.github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_trabalho`</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>Observe que alterei o <code>Host</code> e o <code>IdentityFile</code>, fazendo referência a minha nova chave gerada e mantive a antiga public key como <em>default</em>.</p><p>Feito isso, basta adicionar essa nova chave ao seu repositório e alterar no repositório clonado o <strong>remote</strong>, para fazer isso, deve alterar a url para a que você configurou em <code>Host</code>, da seguinte forma:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@trabalho.github.com:vjordan/projeto2</span><br></pre></td></tr></table></figure><p>Com isso, você terá N chaves e gerará novas sem perder as antigas, sem problema nenhum!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Digamos que você esteja trabalhando em dois projetos diferentes, com github &lt;strong&gt;diferentes&lt;/strong&gt; e você precisa adicionar a &lt;code&gt;SSH Key&lt;/code&gt; em ambos repositórios. Ao tentar adicionar sua deploy key, você tenta colocar aquela chave que usa no outro projeto mas ao clicar em salvar, se depara com o seguinte erro:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/posts/Error - Key is already in use.png&quot; alt=&quot;Erro de Chave em uso&quot;&gt;&lt;/p&gt;
&lt;p&gt;Para resolver esse problema, você deveria adicionar outra ssh key sem perder a que já está em uso. Mas como?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://backefront.com.br/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Como Usar O Método Filter Em Javascript</title>
    <link href="https://backefront.com.br/filter-function/"/>
    <id>https://backefront.com.br/filter-function/</id>
    <published>2018-08-27T14:43:25.000Z</published>
    <updated>2018-09-07T15:47:25.291Z</updated>
    
    <content type="html"><![CDATA[<p>Em um determinado momento de seu desenvolvimento, você recebe um array com diversos valores aleatórios, mas precisa trabalhar apenas os que são maiores que 20. Para isso, você poderia percorrer essa lista e verificar um por um e retornar um novo array apenas com os valores que passam nessas condições, que poderia ser feito com um <code>for</code> ou um <code>while</code> mas, coincidentemente, o Javascript possui um método do chamado <code>filter</code> que faz justamente isso! </p><p>Você tem uma série de idades e deseja apenas quem é maior de idade.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> idades = [<span class="number">9</span>, <span class="number">10</span>, <span class="number">19</span>, <span class="number">1</span>, <span class="number">40</span>, <span class="number">55</span>, <span class="number">6</span>, <span class="number">87</span>];</span><br></pre></td></tr></table></figure><a id="more"></a> <h2 id="Solucao"><a href="#Solucao" class="headerlink" title="Solução"></a>Solução</h2><p>O método <code>find()</code> retorna um novo array com todos os valores que passam na validação implementada na função, caso nenhum número satisfaça essa condição, um array vazio será retornado.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> maioresDeIdade = idades.filter(<span class="function"><span class="params">idade</span> =&gt;</span> idade &gt;= <span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>Na função acima, estamos percorrendo todos os valores do array e chamando o elemento que está sendo executado no momento com o nome <code>idade</code>. Desta forma, utilizando arrow function, passamos na mesma linha a condição, verificando se idade é igual ou maior à 18.</p><p>E o resultado:<br><img src="/posts/filter-javascript.gif" alt="Retorno da função: Ensino Médio"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Em um determinado momento de seu desenvolvimento, você recebe um array com diversos valores aleatórios, mas precisa trabalhar apenas os que são maiores que 20. Para isso, você poderia percorrer essa lista e verificar um por um e retornar um novo array apenas com os valores que passam nessas condições, que poderia ser feito com um &lt;code&gt;for&lt;/code&gt; ou um &lt;code&gt;while&lt;/code&gt; mas, coincidentemente, o Javascript possui um método do chamado &lt;code&gt;filter&lt;/code&gt; que faz justamente isso! &lt;/p&gt;
&lt;p&gt;Você tem uma série de idades e deseja apenas quem é maior de idade.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; idades = [&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;55&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;87&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>Como Encontrar O Índice De Um Elemento De Um Array Em Javascript</title>
    <link href="https://backefront.com.br/find-index/"/>
    <id>https://backefront.com.br/find-index/</id>
    <published>2018-08-27T14:43:25.000Z</published>
    <updated>2018-09-07T15:47:21.609Z</updated>
    
    <content type="html"><![CDATA[<p>Digamos que temos o seguinte array e o banco de dados nos retorna apenas o valor da <code>role</code>, mas precisamos exibir em nosso front-end o valor da <code>label</code>. Para isso, precisamos acessar a lista pela role e retornar o nome da mesma. Mas como fazer isso?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lista = [</span><br><span class="line">    &#123; <span class="attr">role</span>: <span class="string">'DOUTORADO'</span>, <span class="attr">name</span>: <span class="string">'Doutorado'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">role</span>: <span class="string">'MESTRADO'</span>, <span class="attr">name</span>: <span class="string">'Mestrado'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">role</span>: <span class="string">'POS_GRADUACAO'</span>, <span class="attr">name</span>: <span class="string">'Pós-graduação'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">role</span>: <span class="string">'GRADUACAO'</span>, <span class="attr">name</span>: <span class="string">'Graduação'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">role</span>: <span class="string">'ENSINO_MEDIO'</span>, <span class="attr">name</span>: <span class="string">'Ensino Médio'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">role</span>: <span class="string">'NONE'</span>, <span class="attr">name</span>: <span class="string">'None'</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><a id="more"></a> <h2 id="Aplicacao"><a href="#Aplicacao" class="headerlink" title="Aplicação"></a>Aplicação</h2><p>Em nossa API, quando fazemos o GET do usuário, ele retorna a apenas a <code>role</code> do usuário. Por questões visuais, não podemos deixar exibindo na tela uma informação sem a devida tratativa, correto? Então como faríamos para acessar o <code>name</code> da lista através da <code>role</code> que temos na mão? Para isso, podemos usar o FindIndex!</p><p>Com uma variável auxiliar, encontramos o index da role desejada e acessamos o valor do name através dela! No exemplo, vamos usar ‘ENSINO_MEDIO’ como um valor vindo da API.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> educationIndex = lista.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.role === <span class="string">'ENSINO_MEDIO'</span>); <span class="comment">// Busca o Index que tenha a role como 'ENSINO_MEDIO'</span></span><br><span class="line"><span class="keyword">const</span> escolaridade = lista[educationIndex].name <span class="comment">// Sabendo o índice, fica fácil acessar o name desejado</span></span><br></pre></td></tr></table></figure><p>E o resultado:<br><img src="/posts/findIndex-exemplo.gif" alt="Retorno da função: Ensino Médio"></p><p>Bem fácil e pode ser muito útil quando precisamos acessar um valor que não sabemos o índice diretamente!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Digamos que temos o seguinte array e o banco de dados nos retorna apenas o valor da &lt;code&gt;role&lt;/code&gt;, mas precisamos exibir em nosso front-end o valor da &lt;code&gt;label&lt;/code&gt;. Para isso, precisamos acessar a lista pela role e retornar o nome da mesma. Mas como fazer isso?&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; lista = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;attr&quot;&gt;role&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;DOUTORADO&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Doutorado&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;attr&quot;&gt;role&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;MESTRADO&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Mestrado&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;attr&quot;&gt;role&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;POS_GRADUACAO&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Pós-graduação&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;attr&quot;&gt;role&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;GRADUACAO&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Graduação&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;attr&quot;&gt;role&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;ENSINO_MEDIO&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Ensino Médio&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;attr&quot;&gt;role&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;NONE&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;None&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>Git - Sistema De Controle De Versão De Arquivos</title>
    <link href="https://backefront.com.br/git-basico/"/>
    <id>https://backefront.com.br/git-basico/</id>
    <published>2018-05-16T23:33:56.000Z</published>
    <updated>2018-05-18T13:25:21.844Z</updated>
    
    <content type="html"><![CDATA[<p>Quem nunca deparou-se com essa palavra em descrições de vagas ou em uma conversa técnica com colegas da área?<br>Saber o conceito de Git já se tornou essencial na área de desenvolvimento mas nem todos sabem ou tem vergonha de perguntar sobre este assunto! Neste artigo, iremos apresentar este conceito de versionamento de arquivos!</p><a id="more"></a><h2 id="O-que-e-git"><a href="#O-que-e-git" class="headerlink" title="O que é git?"></a>O que é git?</h2><p>Em rápidas palavras, Git é um sistema de controle de versões de arquivos. Ele armazena as mudanças realizadas em algum determinado arquivo ao decorrer de um período e permite que você possa acessar, recuperar essas versões mais antigas. O uso de versionamento de arquivos pode abranger diversas áreas, como por exemplo, se você é um escritor ou até um designer gráfico, você pode armazenar seus textos/ilustrações e você pode acessar suas últimas alterações.<br>O Git permite que veja quais e quando foram as últimas alterações realizadas nos arquivos alterados.</p><h2 id="Conceitos-de-branch"><a href="#Conceitos-de-branch" class="headerlink" title="Conceitos de branch"></a>Conceitos de branch</h2><p>O git trabalha com um conceito de <em>branch</em>, que em inglês significa <em>ramo</em> ou <em>ramificação</em>, que é justamente a representação do git, onde temos uma árvore principal e as variações, que seriam as alterações que fazemos em arquivos.<br>A imagem abaixo exemplifica este conceito, onde podemos ver que foi criado uma ramificação a partir do galho principal, que é a bolinha verde-água.<br>Nas branches, podemos realizar alterações sem que a ramificação principal seja afetado, com isso podemos trabalhar com maior tranquilidade sem medo de perder os arquivos antigos.</p><p><img src="/posts/Conceito de Branch - Git Basico.png" alt="Conceito de branch - Git básico"></p><h2 id="Como-utilizar-Git"><a href="#Como-utilizar-Git" class="headerlink" title="Como utilizar Git"></a>Como utilizar Git</h2><h4 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h4><p>Para começar utilizar, primeiramente você precisa ter instalado em seu computador. Você pode baixar diretamente pelo <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">site Oficial</a>. </p><h4 id="Iniciando-repositorio"><a href="#Iniciando-repositorio" class="headerlink" title="Iniciando repositório"></a>Iniciando repositório</h4><p>Após instalar, você poderá criar um novo <em>repositório</em>, que nada mais é que o local onde o Git passará a observar alterações.<br>Dentro da pasta em que deseja criar o repositório, abra o terminal (prompt de comando) e digite o comando <code>git init</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p><p>Adicione um arquivo dentro desta pasta e digite <code>git status</code>, com este comando você poderá ver todas as modificações que foram feitas dentro da pasta. Possivelmente você terá um retorno semelhante ao abaixo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        backefront.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure><h4 id="Adicionando-e-commitando-o-arquivo"><a href="#Adicionando-e-commitando-o-arquivo" class="headerlink" title="Adicionando e commitando o arquivo"></a>Adicionando e commitando o arquivo</h4><p>O arquivo recém adicionado estará em <em>vermelho</em>, o que significa que este arquivo ainda não foi confirmado, isto é, que realmente deseja “salvar” ele. Para isto, você precisa adicionar esse arquivo e fazer o <code>commit</code>.<br>Para adicionar arquivos você pode usar <code>git add &lt;nomeDoArquivo&gt;</code> ou <code>git add *</code>. Esse <strong> * </strong> significa que você está adicionando todos os arquivos alterados.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add * //Para adicionar os arquivos</span><br><span class="line">git commit -m &apos;Enviando arquivos&apos; //Commitando os arquivos e adicionando mensagem para identificação</span><br></pre></td></tr></table></figure><h4 id="Enviando-alteracoes"><a href="#Enviando-alteracoes" class="headerlink" title="Enviando alterações"></a>Enviando alterações</h4><p>Nesta etapa, você está pronto para enviar suas alterações para o seu repositório remoto, para isso, execute o comando <code>git push origin master</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p><p>Se você não clonou um repositório existente e quer vincular seu repositório a um servidor remoto, você deve adiciona com o seguinte comando <code>git remote add origin &lt;urlDoServidor&gt;</code><br>Agora você é capaz de enviar suas alterações para o servidor remoto selecionado.</p><p>Em próximos posts, abordaremos os principais comandos <code>git</code> e também os principais serviços para hospedagem de seus repositórios.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Quem nunca deparou-se com essa palavra em descrições de vagas ou em uma conversa técnica com colegas da área?&lt;br&gt;Saber o conceito de Git já se tornou essencial na área de desenvolvimento mas nem todos sabem ou tem vergonha de perguntar sobre este assunto! Neste artigo, iremos apresentar este conceito de versionamento de arquivos!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://backefront.com.br/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Tipos Imutáveis</title>
    <link href="https://backefront.com.br/tipos-imutaveis/"/>
    <id>https://backefront.com.br/tipos-imutaveis/</id>
    <published>2018-05-12T22:46:09.000Z</published>
    <updated>2018-06-11T16:07:09.062Z</updated>
    
    <content type="html"><![CDATA[<p>Se você já programa em Java há algum tempo, provavelmente deve ter se deparado com a frase: <em>Strings são imutáveis</em>.<br>Beleza, mas o que isso significa?</p><p>Um tipo imutável não permite a alteração do estado de um objeto criado a partir dele de forma <em>desautorizada</em>.</p><p>Vamos ver um tipo “normal” (mutável):<br><a id="more"></a><br>    public class Pessoa {</p><pre><code>    private String nome;    public Pessoa() { }    public Pessoa(String nome) {        this.nome = nome;    }    public String getNome() {        return nome;    }    public void setNome(String nome) {        this.nome = nome;    }}</code></pre><p>Até aqui nada demais.<br>Agora vamos trabalhar com essa clsse:</p><pre><code>public static void main(String[] args) {    Pessoa p1 = new Pessoa();    Pessoa p2 = new Pessoa(&quot;Igor&quot;);    p1.setNome(&quot;Victor&quot;);    p2.setNome(&quot;João&quot;);    System.out.println(p1.getNome() + &quot;, &quot; + p2.getNome());}</code></pre><blockquote><p>Saída:<br><code>Victor, João</code></p></blockquote><p>Podemos perceber que o objeto <code>p1</code> foi criado sem informar o nome da pessoa, dessa forma, o atributo <code>nome</code> deveria ser nulo, mas é <code>Victor</code>.<br>Já o objeto <code>p2</code> foi criado com o nome Igor, mas seu nome atual é <code>João</code>.<br>Bom, até onde sei, são extremamente raros os casos onde uma pessoa muda de nome… Então por que permitir uma alteração desse tipo?</p><p>Nesse caso, não faz sentido permitir que o tipo <code>Pessoa</code> seja mutável.<br>Pois então, como torná-lo <strong>imutável</strong>? Vamos lá:</p><p>Primeiramente, precisamos declarar seu atributo como <code>final</code>.<br>A palavra reservada <code>final</code> diz que essa variável/atributo receberá uma atribuição apenas uma única vez. Normalmente essa atribuição acontece na declaração. Ex:</p><pre><code>final String nome = &quot;Igor&quot;;</code></pre><p>Isso funciona, mas não faz sentido no nosso caso, pois não queremos que todas as instâncias de <code>Pessoa</code> se chamem Igor.<br>Então? Como fazemos?<br>Podemos declarar o atributo como <code>final</code>, sem inicializá-lo como o exemplo acima, mas inicializá-lo pelo construtor:</p><pre><code>private final String nome;public Pessoa(String nome) {    this.nome = nome;}</code></pre><p>Pronto. Assim bloqueamos qualquer outra atribuição que o atributo <code>nome</code> poderia sofrer.<br>Mas e o construtor sem argumentos, como fica? Bom, nesse caso, não tem muito o que fazer:</p><pre><code>private final String nome;public Pessoa() {    nome = null;}</code></pre><p>Não importa se o construtor tem ou não argumentos. O importante aqui é que todos os atributos marcados como <code>final</code> sejam inicializados em todos os construtores.</p><p>Ótimo! Temos um atributo final e depois de criada uma instância sabemos que o nome nunca será alterado, mas tem coisa errada aí.<br>O método setter de <code>nome</code>.</p><p>Nessa altura do campeonato ele já não compila mais jutamente pelo fato de fazer:</p><pre><code>this.nome = nome;</code></pre><p>Uma vez que o atributo <code>nome</code> é <code>final</code>, qualquer tentativa de atribuição gera um erro de compilação.</p><p>E agora? Devemos remover o método? Sim!<br>Essa é uma outra característica de tipos imutáveis: não possuir métodos setter.</p><hr><p>Aqui estamos exemplificando um tipo onde queremos que seja 100% imutável, mas é bem comum encontrarmos situaçãoes onde só alguns atributos queremos que sejam imutáveis e os demais não.<br>Não tem nenhum problema com isso, basta colocar os atributos que deseja ser imutável como <code>final</code>, inicialiá-los pelos construtores (todos) e remover seu método setter.</p><p>Podemos citar como exemplo caso o tipo <code>Pessoa</code> tivesse um atributo <code>idade</code>.<br>Não faria nenhum sentido deixar esse atributo como <code>final</code>, justamente por que nós envelhecemos e nossa idade muda.</p><p>Eu, particularmente, ao invés de criar um método setter para esse atributo, criaria algo como:</p><pre><code>public void fazAniversario() {    idade++;}</code></pre><p>Pois num método setter, alugém poderia <em>setar</em> uma idade que antes era <code>15</code> para <code>25</code> e isso não faz sentido.</p><p>Mas estamos fugindo um pouco do foco… Voltando:  </p><p>Afinal, quais são as vantagens de usar um tipo imutável?</p><p>De cabeça lembro de duas principais:</p><ul><li><p>Concorrência:<br>  Nada pior do que um cenário com múltiplas threads mexendo num mesmo objeto :(. Com um tipo imutável você garante que o seu objeto estará sempre <em>bonitinho</em>.</p></li><li><p>Segurança:<br>  Você sabe exatamente o que tem no seu objeto!</p></li></ul><hr><p>Show, mas até agora exemplificamos um tipo imutável com atributos de tipos imutáveis também.<br>Como fazemos com atributos de tipos não imutáveis?</p><p>Vamos supôr que a classe <code>Pessoa</code> tenha um atirbuto do tipo <code>Endereco</code>, que é mutável:</p><pre><code>public class Endereco {    private String rua;    private Integer numero;    public Endereco(String rua, Integer numero) {        this.rua = rua;        this.numero = numero;    }    public String getRua() {        return rua;    }    public void setRua(String rua) {        this.rua = rua;    }    public Integer getNumero() {        return numero;    }    public void setNumero(Integer numero) {        this.numero = numero;    }}public class Pessoa {    private final String nome;    private final Endereco endereco;    public Pessoa() {        nome = null;        endereco = null;     }    public Pessoa(String nome, Endereco endereco) {        this.nome = nome;        this.endereco = endereco;    }    public String getNome() {        return nome;    }    public Endereco getEndereco() {        return endereco;    }}</code></pre><p>Legal, o atributo <code>endereco</code> está <code>final</code>, mas isso não garante nada pois <code>Endereco</code> não é imutável. Vejamos:<br>Caso alguém invoque o método getter de <code>endereco</code>, essa pessoa pode alterar tanto a rua quanto o número:</p><pre><code>public static void main(String[] args) {    Endereco e = new Endereco(&quot;Av. Paulista&quot;, 10);    Pessoa p = new Pessoa(&quot;Igor&quot;, e);    Endereco enderecoModificado = p.getEndereco();    enderecoModificado.setRua(&quot;Av. Liberdade&quot;);    enderecoModificado.setNumero(200);    System.out.println(p.getEndereco().getRua());}</code></pre><blockquote><p>Saída:<br><code>Av. Liberdade</code></p></blockquote><p>Nesse caso, devemos criar uma cópia do objeto que queremos retornar, para que seja devolvida uma nova referência, deiferente da referência ao objeto original:</p><pre><code>public Endereco getEndereco() {    return new Endereco(endereco.getRua(), endereco.getNumero());}</code></pre><p>Ao implementarmos o getter dessa forma, temos o mesmo exemplo de execução que retornou <code>Av. Liberdade</code> agora retornando <code>Av. Paulista</code>.</p><p>Por último, temos os casos de listas.<br>Escrever métodos de cópias de listas é algo <em>bixeira</em>. Para isso devemos usar o método estático <code>Collections.unmodifiableList(list)</code>:</p><pre><code>import java.util.Collections;   import java.util.List; import java.util.ArrayList;   public class Pessoa {    private final String nome;    private final List&lt;Endereco&gt; enderecos;    public Pessoa() {        nome = null;        enderecos = null;     }    public Pessoa(String nome, List&lt;Endereco&gt; enderecos) {        this.nome = nome;        this.enderecos = enderecos;    }    public String getNome() {        return nome;    }    public List&lt;Endereco&gt; getEnderecos() {        return Collections.unmodifiableList(enderecos);    }}</code></pre><p>Ao tentarmos executar o código abaixo:</p><pre><code>public static void main(String[] args) {    List&lt;Endereco&gt; es = new ArrayList&lt;&gt;();    es.add(new Endereco(&quot;Rua 1&quot;, 10));    es.add(new Endereco(&quot;Rua 2&quot;, 20));    Pessoa p = new Pessoa(&quot;Igor&quot;, es);    List&lt;Endereco&gt; listNaoModif = p.getEnderecos();    listNaoModif.add(new Endereco(&quot;Rua 3&quot;, 30));}</code></pre><p>Recebemos a Exception <code>java.lang.UnsupportedOperationException</code>, pois a lista retornada pelo <code>unmodifiableList(list)</code>, como o nome já diz, não pode ser modificada.</p><p>Dessa forma conseguimos garantir o estado dos nossos objetos!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Se você já programa em Java há algum tempo, provavelmente deve ter se deparado com a frase: &lt;em&gt;Strings são imutáveis&lt;/em&gt;.&lt;br&gt;Beleza, mas o que isso significa?&lt;/p&gt;
&lt;p&gt;Um tipo imutável não permite a alteração do estado de um objeto criado a partir dele de forma &lt;em&gt;desautorizada&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos ver um tipo “normal” (mutável):&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://backefront.com.br/tags/Java/"/>
    
      <category term="Back-end" scheme="https://backefront.com.br/tags/Back-end/"/>
    
  </entry>
  
  <entry>
    <title>Entendendo O Z-Index</title>
    <link href="https://backefront.com.br/z-index/"/>
    <id>https://backefront.com.br/z-index/</id>
    <published>2018-05-10T14:05:44.000Z</published>
    <updated>2018-05-16T17:28:33.908Z</updated>
    
    <content type="html"><![CDATA[<p>Em geral, uma página HTML pode ser considerada bidimensional, isto é, seus elementos como textos e imagens são organizados na página sem uma sobreposição. Neste caso, a construção da página segue um fluxo e os elementos têm consciência do espaço e tamanho que outros elementos ocupam. Com o z-index, podemos mudar esse funcionamento.</p><a id="more"></a><blockquote><p>No CSS 2.1, cada elemento possui sua posição em três dimensões. Adicionado a sua posição horizontal/vertical, os elementos possuem os “z-axis” e são formados um no topo do outro. As posições z-axis são particulamente revelantes quando ocorre visualmente a sobreposição. (CSS 2.1 Section 9.9.1 - Layered presentation)</p></blockquote><p>A propriedade z-index define a posição dos elementos permitindo que um elemento fique por cima ou abaixo de outro. Os valores nele definido são descedentes, ou seja, quanto maior o número, mais ‘próximo’ de você ele estará.</p><p>Para que esta propriedade seja aplicada, é necessário que o elemento que esteja sendo aplicado tenha um <code>position</code> diferente de <code>static</code>.</p><h2 id="Sintaxe"><a href="#Sintaxe" class="headerlink" title="Sintaxe"></a>Sintaxe</h2><p>A propriedade z-index é definida por palavra-chave ou um inteiro, podendo esse número ser negativo!</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Uso de uma palavra-chave */</span></span><br><span class="line"><span class="selector-tag">z-index</span>: <span class="selector-tag">auto</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Usando valores inteiros */</span></span><br><span class="line"><span class="selector-tag">z-index</span>: 3;</span><br><span class="line"><span class="selector-tag">z-index</span>: <span class="selector-tag">-1</span>; <span class="comment">/* Negative values to lower the priority */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Valores globais */</span></span><br><span class="line"><span class="selector-tag">z-index</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">z-index</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">z-index</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure><p>Com o z-index você pode sobrepor elementos, trazendo para a primeira camada o elemento desejado. Muito utilizado em construção de <code>modal</code>. Também podemos ver essa propriedade em ação quando queremos que o background tenha um efeito de sobrepor ao rolar a página, como pode ser visto neste exemplo <a href="https://codepen.io/thomasvaeth/pen/xLwwZq" target="_blank" rel="noopener">aqui</a>.</p><p>Existem várias coisas legais que podem ser feitas, resta agora só usar imaginação! :)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Em geral, uma página HTML pode ser considerada bidimensional, isto é, seus elementos como textos e imagens são organizados na página sem uma sobreposição. Neste caso, a construção da página segue um fluxo e os elementos têm consciência do espaço e tamanho que outros elementos ocupam. Com o z-index, podemos mudar esse funcionamento.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="CSS" scheme="https://backefront.com.br/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Template Strings, O Que É E Como Usar?</title>
    <link href="https://backefront.com.br/template-string/"/>
    <id>https://backefront.com.br/template-string/</id>
    <published>2018-04-11T22:30:54.000Z</published>
    <updated>2018-09-01T15:37:02.584Z</updated>
    
    <content type="html"><![CDATA[<p>Template Strings são literais strings que permitem a concatenação de strings e expressões de um modo muito mais fácil e agradável de interpretar o código. Em minha opinião, é uma das features implementadas no ECMAScript 2015 que facilitou meu desenvolvimento de códigos!</p><h2 id="Como-utilizar-template-strings"><a href="#Como-utilizar-template-strings" class="headerlink" title="Como utilizar template strings"></a>Como utilizar template strings</h2><p>A utilização de Template Strings é muito fácil, basta envolver o que você deseja entre acentos graves (também conhecido como crase).<br>No exemplo abaixo, mostramos como é a utilização normal e como ficaria usando a template string.</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nome = <span class="string">'Essa é uma declaração de variável de forma clássica'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nome = <span class="string">`Essa é a declaração usando template strings`</span>;</span><br></pre></td></tr></table></figure><blockquote><p>Legal! Mas aparentemente nada mudou, continua a mesma coisa! Então qual seria a vantagem de trocar um pelo outro?</p></blockquote><p>Realmente, olhando em um exemplo tão básico assim, não faz diferença nenhuma! Mas e se complicarmos só um pouquinho?</p><p>Vamos imaginar um cenário em que você deseja retornar um elemento HTML criado através do Javascript, vamos lá!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elemento = <span class="string">'&lt;section&gt;&lt;h1&gt;Pequeno teste&lt;/h1&gt;&lt;p&gt;Esse é um pequeno teste para o site backefront.com.br!&lt;/p&gt;&lt;/section&gt;'</span>;</span><br></pre></td></tr></table></figure><p>Meio confuso isso né? Vamos quebrar o elemento por linhas para poder facilitar a leitura!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elemento = <span class="string">'&lt;section&gt;'</span>;</span><br><span class="line">elemento += <span class="string">'&lt;h1&gt;Pequeno teste&lt;/h1&gt;'</span>;</span><br><span class="line">elemento += <span class="string">'&lt;p&gt;Esse é um pequeno teste para o site backefront.com.br!&lt;/p&gt;'</span>;</span><br><span class="line">elemento += <span class="string">'&lt;/section&gt;'</span>;</span><br></pre></td></tr></table></figure><p>Agora melhorou, mas ainda sim é chato ficar digitando tudo isso! Com o template strings, isso fica muito mais fácil!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elemento = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;section&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;</span></span><br><span class="line"><span class="string">Pequeno teste</span></span><br><span class="line"><span class="string">    &lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;</span></span><br><span class="line"><span class="string">Esse é um pequeno teste para o site backefront.com.br!</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;/section&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>Muito melhor não? E o melhor de tudo, isso funciona sem problemas! Perceba que envolvemos o conteúdo entre os acentos, da mesma forma que fazemos com aspas e pronto!</p><h2 id="Template-Strings-encapsulando-funcoes"><a href="#Template-Strings-encapsulando-funcoes" class="headerlink" title="Template Strings encapsulando funções"></a>Template Strings encapsulando funções</h2><p>Para encapsular variáveis dentro de uma string, no molde antigo você precisaria fazer da seguinte forma:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> valor = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> encapsulado = <span class="string">'Esse blog é '</span> + valor; <span class="comment">//Resultado: Esse blog é 10</span></span><br></pre></td></tr></table></figure><p>Agora com essa nova feature:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> valor = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> encapsulado = <span class="string">`Esse blog é <span class="subst">$&#123;valor&#125;</span>`</span>; <span class="comment">//Resultado: Esse blog é 10</span></span><br></pre></td></tr></table></figure><p>O mesmo se aplica para quando quer passar uma função no meio da string!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">valor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> encapsulado = <span class="string">`Esse blog é <span class="subst">$&#123;valor()&#125;</span>`</span>; <span class="comment">//Resultado: Esse blog é 10</span></span><br></pre></td></tr></table></figure><h2 id="Consideracoes-finais"><a href="#Consideracoes-finais" class="headerlink" title="Considerações finais"></a>Considerações finais</h2><p>Template Strings é uma característica do ES6 que veio para facilitar nossas vidas, é extremamente poderoso e muito útil no nosso dia-a-dia! Sua aceitação entre os navegadores é praticamente total, como demonstrado na imagem abaixo, através de um site de consulta do que podemos usar, o <a href="https://caniuse.com" target="_blank" rel="noopener">caniuse</a> </p><p><img src="/posts/CanIUse - Template Strings.png" alt="Can I Use - Template Strings"></p><p>Espero que utilizem essa fantástica propriedade!</p><h2 id="Referencias"><a href="#Referencias" class="headerlink" title="Referências"></a>Referências</h2><p><a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/template_strings" target="_blank" rel="noopener">MDN - Template Strings</a><br><a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/template_strings" target="_blank" rel="noopener">ECMAScript 2015 (6th Edition, ECMA-262)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Template Strings são literais strings que permitem a concatenação de strings e expressões de um modo muito mais fácil e agradável de interpretar o código. Em minha opinião, é uma das features implementadas no ECMAScript 2015 que facilitou meu desenvolvimento de códigos!&lt;/p&gt;
&lt;h2 id=&quot;Como-utilizar-template-strings&quot;&gt;&lt;a href=&quot;#Como-utilizar-template-strings&quot; class=&quot;headerlink&quot; title=&quot;Como utilizar template strings&quot;&gt;&lt;/a&gt;Como utilizar template strings&lt;/h2&gt;&lt;p&gt;A utilização de Template Strings é muito fácil, basta envolver o que você deseja entre acentos graves (também conhecido como crase).&lt;br&gt;No exemplo abaixo, mostramos como é a utilização normal e como ficaria usando a template string.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>Como Funciona O Strict Mode</title>
    <link href="https://backefront.com.br/strict-mode/"/>
    <id>https://backefront.com.br/strict-mode/</id>
    <published>2018-04-10T16:21:09.000Z</published>
    <updated>2018-05-16T17:30:09.834Z</updated>
    
    <content type="html"><![CDATA[<p>Quem nunca encontrou essas palavras enquanto procurava por referências ou até mesmo quando estava realizando a manutenção de um código, e acabou se deparando com ele?<br>É bem comum encontrarmos “strict mode” nos scripts mas como funciona seu funcionamento e para que serve? Neste post, explicaremos para você como usar e para que usar!</p><a id="more"></a><h2 id="O-“strict-mode”"><a href="#O-“strict-mode”" class="headerlink" title="O “strict mode”"></a>O “strict mode”</h2><p>Foi introduzido no ECMAScript5, atualmente suportado por todos os navegadores modernos,faz com que o navegador execute o seu código javascript de forma mais rígida. De certa forma, força que desenvolvamos nossos códigos de forma mais correta, não permitindo que façamos algumas coisas do tipo: utilizar uma variável que não havia sido declarada, usar palavras reservadas do javascript, entre outras coisas que listaremos mais a frente. Os benefícios de usá-lo, além de escrever melhor seu código, é também a possibilidade de encontrar bugs mais facilmente.</p><h2 id="Usando-o-strict-mode"><a href="#Usando-o-strict-mode" class="headerlink" title="Usando o strict mode"></a>Usando o strict mode</h2><p>Para habilita-lo, você pode fazer de duas formas, sendo uma habilitando para todo o script ou em funções individuais. </p><h2 id="Usando-em-scripts"><a href="#Usando-em-scripts" class="headerlink" title="Usando em scripts"></a>Usando em scripts</h2><p>Para invocar o strict mode dentro do script todo, você precisa apenas adicionar ‘use strict’; antes de qualquer trecho de código, ou seja, em sua primeira linha do JS.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mensagem = <span class="string">"Bem-vindo ao backefront!"</span>;</span><br></pre></td></tr></table></figure><p>Esse código acima funcionaria sem problemas, pois você está declarando a variável mensagem e atribuindo um valor a mesma. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line">mensagem = <span class="string">"Bem-vindo ao backefront!"</span>;</span><br></pre></td></tr></table></figure><p>Já esse trecho apresentaria um erro, justamente por causa da invocação do strict, ocorreria um erro de referência.<br><code>Uncaught ReferenceError: mensagem is not defined</code></p><h2 id="Usando-em-funcoes"><a href="#Usando-em-funcoes" class="headerlink" title="Usando em funções"></a>Usando em funções</h2><p>Para usarmos esse modo dentro de funções, o funcionamento e a chamada dele é igual ao que fizemos no modo script! A única diferença é que o modo será aplicado somente para aquela função que fora definido. </p><p>Exemplo de implementação do código<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strict</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Bem-vindo ao backefront!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Mudancas-ocasionadas-ao-utilizar-strict-mode"><a href="#Mudancas-ocasionadas-ao-utilizar-strict-mode" class="headerlink" title="Mudanças ocasionadas ao utilizar strict mode"></a>Mudanças ocasionadas ao utilizar strict mode</h2><p>As mudanças são percebidas tanto no comportamento em execução quanto em sintaxe. Em geral, as principais alterações que a diretiva faz são: </p><ul><li>Conversão de um simples engano no código para erro de compilação, que impedem a compilação do código.</li><li><p>Não permite propriedades ou parametros duplicados</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">var</span> object = &#123;<span class="attr">nome</span>: <span class="string">"Back"</span>, <span class="attr">nome</span>: <span class="string">"front"</span>&#125;; <span class="comment">//Lança erro de compilação</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">valor1, valor2, valor1</span>)</span>&#123;&#125; <span class="comment">// Lança erro de compilação</span></span><br></pre></td></tr></table></figure></li><li><p>Lança erro ao utilizar errado o delete. O operador <code>delete</code> que é usado para remover propriedades de objetos, não pode ser utilizado em propriedades não-configurável (configurable definida como false) de algum objeto.</p></li></ul><h2 id="Referencias"><a href="#Referencias" class="headerlink" title="Referências"></a>Referências</h2><p><a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">MDN - Strict mode</a><br><a href="https://www.w3schools.com/js/js_strict.asp" target="_blank" rel="noopener">w3schools - JavaScript Use Strict</a></p><p>Escrito por <a href="https://www.linkedin.com/in/victorjordan95/" target="_blank" rel="noopener">Victor Jordan</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Quem nunca encontrou essas palavras enquanto procurava por referências ou até mesmo quando estava realizando a manutenção de um código, e acabou se deparando com ele?&lt;br&gt;É bem comum encontrarmos “strict mode” nos scripts mas como funciona seu funcionamento e para que serve? Neste post, explicaremos para você como usar e para que usar!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
  </entry>
  
</feed>
