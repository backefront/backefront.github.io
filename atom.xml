<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dicas de desenvolvimento e programação</title>
  
  <subtitle>Dicas de desenvolvimento front-end, back-end, testes e muito mais!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://backefront.com.br/"/>
  <updated>2020-03-03T16:35:24.632Z</updated>
  <id>https://backefront.com.br/</id>
  
  <author>
    <name>Melanie Jordan e Victor Jordan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Estruturas Imutáveis No Javascript</title>
    <link href="https://backefront.com.br/estruturas-imutaveis-javascript/"/>
    <id>https://backefront.com.br/estruturas-imutaveis-javascript/</id>
    <published>2020-03-03T16:22:15.000Z</published>
    <updated>2020-03-03T16:35:24.632Z</updated>
    
    <content type="html"><![CDATA[<p>Ao falar sobre imutabilidade o pensamento que nos vem a cabeça é: <em>simples, é só fazer cópia das variáveis ao invés de manipular a mesma</em>.<br>De fato, a cópia ao invés do reúso dos objetos é um dos pilares da imutabilidade. Mas ao trabalharmos dessa forma, resolveremos o problema de mutação, mas criaremos outro: consumo de memória e processamento excessivos.</p><p>Considerando o primeiro cenário (cópia), é possível trabalhar da seguinte maneira:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr]</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="string">'x'</span></span><br><span class="line"><span class="comment">// arr2 =&gt; ['x', 'b', 'c', 'd', 'e', 'f', 'g', 'h']</span></span><br></pre></td></tr></table></figure><p>Ao fazer isso, internamente são criados dois arrays completamente diferentes, porém com alguns valores em comum.<br>Não seria mais interessante se fosse possível fazer o que aparentemente fazemos com esse código: criar o <code>arr2</code> “baseado” em <code>arr</code>, dessa forma otimizando memória?</p><a id="more"></a><p>Com certeza.  </p><p>Uma forma “simples” de fazer isso é dividindo o nosso array em pequenos arrays e dessa forma, juntar as partes necessárias.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ab = [<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line"><span class="keyword">const</span> cd = [<span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="keyword">const</span> ef = [<span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line"><span class="keyword">const</span> gh = [<span class="string">'g'</span>, <span class="string">'h'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">'x'</span>, <span class="string">'b'</span>, ...cd, ...ef, ...gh]</span><br><span class="line"><span class="comment">// arr2 =&gt; ['x', 'b', 'c', 'd', 'e', 'f', 'g', 'h']</span></span><br></pre></td></tr></table></figure><p><em>Voilà</em>: temos agora o <code>arr2</code> construído sem precisarmos sobrecarregar a memória.</p><p>A solução funciona, mas dá um baita trabalho, não?</p><p>Por sorte, alguém já parou para pensar em uma solução para situações como essas (e com manipulação de objetos também!)</p><p>Em JavaScript existe uma lib chamada <a href="https://swannodette.github.io/mori" target="_blank" rel="noopener">Mori</a> que nos ajuda exatamente com isso.<br>Ela faz diversas operações em arrays e objetos, mantendo a imutabilidade sem forçar memória ou processamento.<br>Vamos ver o mesmo código que os anteriores, mas utilizando o mori:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mori = <span class="built_in">require</span>(<span class="string">'mori'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = mori.vector(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>)</span><br><span class="line"><span class="keyword">const</span> arr2 = mori.assoc(arr, <span class="number">0</span>, <span class="string">'x'</span>)</span><br><span class="line"><span class="comment">// arr2 =&gt; ['x' 'b' 'c' 'd' 'e' 'f' 'g' 'h']</span></span><br></pre></td></tr></table></figure><p>Legal, né?<br>Mas.. qual é a mágica por trás dessa lib?<br>Bom, a solução é bem complexa, mas de uma maneira bem simplista, podemos pensar no acesso a cada posição do array através de árvore, organizada pelos hashs dos elementos. </p><p>Um ponto interessante é que se repararmos bem, <code>arr2</code> não é mais um “array” normal do JS.<br>Note que não tem vírgulas entre os elementos (não, não foi falha de digitação :p).<br>Isso ocorre pois o Mori não trabalha com os arrays em sua forma “natural”. Na verdade, é bem diferente. Se fizermos um <code>console.log(arr2)</code> teremos:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">W &#123;</span><br><span class="line">  k: <span class="literal">null</span>,</span><br><span class="line">  g: <span class="number">8</span>,</span><br><span class="line">  shift: <span class="number">5</span>,</span><br><span class="line">  root: ef &#123;</span><br><span class="line">    u: <span class="literal">null</span>,</span><br><span class="line">    e: [</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  W: [</span><br><span class="line">    <span class="string">'x'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</span><br><span class="line">    <span class="string">'g'</span>, <span class="string">'h'</span></span><br><span class="line">  ],</span><br><span class="line">  p: <span class="literal">null</span>,</span><br><span class="line">  j: <span class="number">167668511</span>,</span><br><span class="line">  q: <span class="number">8196</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Doido né?<br>Mas acredite, o Mori foi criado, desde o começo, visando performance e otimização de memória e processamento.<br>Dessa forma, é preferivel trabalhar com a lib ao invés de manipular arrays na mão.</p><p>Aqui foi colocado um exemplo bem simples do Mori, mas vale dar uma olhada na documentação da lib pois tem várias funções maneiras para trabalhar com objetos e arrays, bem como a explicação mais detalhada de como a lib em si funciona.</p><p>Para fazer esse post, eu me baseei nesse vídeo da <a href="https://twitter.com/anjanavakil" target="_blank" rel="noopener">Anjana Vakil</a> na <a href="https://jsconf.eu" target="_blank" rel="noopener">jsconf.eu 2019</a> onde ela explica o esquema de acesso aos atributos por árvore, hashs e conversão desses hashs em binário. Ela mostra também exemplos com o Mori e com uma lib do Facebook chamada <a href="https://immutable-js.github.io/immutable-js/" target="_blank" rel="noopener">ImmutableJS</a> para cenários de imutabilidade com esse acabamos de analisar. </p><div class="video-container"><iframe src="https://www.youtube.com/embed/Wo0qiGPSV-s" frameborder="0" allow="accelerometer;" autoplay;="" encrypted-media;="" gyroscope;="" picture-in-picture="" allowfullscreen></iframe></div><h2 id="Gostou-desse-post"><a href="#Gostou-desse-post" class="headerlink" title="Gostou desse post?"></a>Gostou desse post?</h2><p>Você pode encontrar ele e outros em <a href="https://igventurelli.me" target="_blank" rel="noopener">https://igventurelli.me</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ao falar sobre imutabilidade o pensamento que nos vem a cabeça é: &lt;em&gt;simples, é só fazer cópia das variáveis ao invés de manipular a mesma&lt;/em&gt;.&lt;br&gt;De fato, a cópia ao invés do reúso dos objetos é um dos pilares da imutabilidade. Mas ao trabalharmos dessa forma, resolveremos o problema de mutação, mas criaremos outro: consumo de memória e processamento excessivos.&lt;/p&gt;
&lt;p&gt;Considerando o primeiro cenário (cópia), é possível trabalhar da seguinte maneira:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; arr = [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;g&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;h&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; arr2 = [...arr]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr2[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// arr2 =&amp;gt; [&#39;x&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Ao fazer isso, internamente são criados dois arrays completamente diferentes, porém com alguns valores em comum.&lt;br&gt;Não seria mais interessante se fosse possível fazer o que aparentemente fazemos com esse código: criar o &lt;code&gt;arr2&lt;/code&gt; “baseado” em &lt;code&gt;arr&lt;/code&gt;, dessa forma otimizando memória?&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Como Criar Um Fundo Com Duas Cores Com CSS</title>
    <link href="https://backefront.com.br/css-gradiente/"/>
    <id>https://backefront.com.br/css-gradiente/</id>
    <published>2020-03-03T11:36:18.000Z</published>
    <updated>2020-03-03T16:35:24.632Z</updated>
    
    <content type="html"><![CDATA[<p>Antigamente, quando precisávamos fazer um background onde tivesse duas cores, teríamos que utilizar uma imagem ou dividir em duas <code>div</code> diferentes o que poderia não ser tão prático.<br>Com a evolução do CSS, conseguimos agora criar um background com duas ou mais cores, da forma que quisermos!</p><p>Para isso, usamos a mesma propriedade <code>background</code>, porém com um pequeno detalhe a mais!</p><a id="more"></a><p>O grande segredo em ter diversas cores em um mesmo background é utilizarmos <code>linear-gradient</code> ou <code>radial-gradient</code> juntamente ao background.<br>Ficando algo semelhante ao seguinte trecho:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">red</span>, <span class="selector-tag">yellow</span>);</span><br></pre></td></tr></table></figure><p>Também podemos usar uma variação com ângulo e a porcentagem do background que queremos preencher:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-tag">rgba</span>(2,0,36,1) 0%, <span class="selector-tag">rgba</span>(9,9,121,1) 35%, <span class="selector-tag">rgba</span>(0,212,255,1) 100%);</span><br></pre></td></tr></table></figure><p>Fácil, não é mesmo?</p><p>Como exemplo do que podemos fazer, o desenvolvedor <a href="https://codepen.io/kedar" target="_blank" rel="noopener">Kedar</a> criou um codepen com diversos exemplos, que você pode visualizar <a href="https://codepen.io/kedar/pen/MpXgoR" target="_blank" rel="noopener">neste link</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Antigamente, quando precisávamos fazer um background onde tivesse duas cores, teríamos que utilizar uma imagem ou dividir em duas &lt;code&gt;div&lt;/code&gt; diferentes o que poderia não ser tão prático.&lt;br&gt;Com a evolução do CSS, conseguimos agora criar um background com duas ou mais cores, da forma que quisermos!&lt;/p&gt;
&lt;p&gt;Para isso, usamos a mesma propriedade &lt;code&gt;background&lt;/code&gt;, porém com um pequeno detalhe a mais!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="CSS" scheme="https://backefront.com.br/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Como Esperar O Resultado De Uma Função No Javascript</title>
    <link href="https://backefront.com.br/como-esperar-resultado-funcao-javascript/"/>
    <id>https://backefront.com.br/como-esperar-resultado-funcao-javascript/</id>
    <published>2020-02-24T11:00:48.000Z</published>
    <updated>2020-03-03T16:35:24.632Z</updated>
    
    <content type="html"><![CDATA[<p>Uma coisa que é sabida é que o Javascript é síncrono.<br>Isto quer dizer que ele executa suas funções em paralelo, sem esperar terminar alguma função primeiro para depois executar uma outra.</p><p>Muitas das vezes, isso não nos causa nenhum impacto, mas em alguns casos, precisamos esperar o resultado de uma determinada função para que assim possamos seguir em diante do nosso código. </p><p>Para isso, precisaríamos então que essa nossa função se transforme em uma função <code>assíncrona</code>. Mas como?</p><a id="more"></a><p>Vamos considerar um cenário onde precisamos calcular um determinado número, armazena em um array e depois exibimos ele.<br>Começamos criando nossa estrutura inicial:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> aluno = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calcStudent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  aluno.push(&#123;<span class="attr">nome</span>: <span class="string">"Victor"</span>, <span class="attr">nota</span>: <span class="number">7</span>&#125;, &#123;<span class="attr">nome</span>: <span class="string">"Lo Ruanda"</span>, <span class="attr">nota</span>: <span class="number">9</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showStudentResult</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  calcStudent();</span><br><span class="line">  <span class="built_in">console</span>.log(aluno);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nessa função, o Javascript fará o <code>console.log</code> antes mesmo de terminar o <code>push</code> dentro da função <code>calcStudent</code>.<br>Precisamos garantir então que o console.log deve <strong>esperar</strong> que a função de calcular foi terminada para assim exibir!</p><p>Para isso, usaremos o <code>Promise</code>!</p><p>A primeira coisa que devemos fazer é transformar a função <code>calcStudent</code> em <strong>async</strong> e informaremos que queremos que o Javascript <strong>espere</strong> a resolução dessa variável.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> aluno = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Adicionamos 'async'</span></span><br><span class="line"><span class="comment">// no começo da função</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">calcStudent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  aluno.push(&#123;<span class="attr">nome</span>: <span class="string">"Victor"</span>, <span class="attr">nota</span>: <span class="number">7</span>&#125;, &#123;<span class="attr">nome</span>: <span class="string">"Lo Ruanda"</span>, <span class="attr">nota</span>: <span class="number">9</span>&#125;);</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(aluno);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nesta função, a função agora </span></span><br><span class="line"><span class="comment">// nos permite 'esperar' o </span></span><br><span class="line"><span class="comment">// resultad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showStudentResult</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  calcStudent().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(aluno);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dessa forma, esperamos a função se resolver para que possamos exibir o resultado!<br>Também poderíamos fazer como retorno da função, da seguinte maneira:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Colocamos o await no retorno</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">calcStudent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> aluno = [];</span><br><span class="line">  aluno.push(&#123;<span class="attr">nome</span>: <span class="string">"Victor"</span>, <span class="attr">nota</span>: <span class="number">7</span>&#125;, &#123;<span class="attr">nome</span>: <span class="string">"Lo Ruanda"</span>, <span class="attr">nota</span>: <span class="number">9</span>&#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(aluno);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Acessamos o retorno da função</span></span><br><span class="line"><span class="comment">// através do response</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showStudentResult</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  calcStudent().then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Essa abordagem nos permite transformar funções síncrona em assíncrona, o que é, em alguns casos, muito útil!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Uma coisa que é sabida é que o Javascript é síncrono.&lt;br&gt;Isto quer dizer que ele executa suas funções em paralelo, sem esperar terminar alguma função primeiro para depois executar uma outra.&lt;/p&gt;
&lt;p&gt;Muitas das vezes, isso não nos causa nenhum impacto, mas em alguns casos, precisamos esperar o resultado de uma determinada função para que assim possamos seguir em diante do nosso código. &lt;/p&gt;
&lt;p&gt;Para isso, precisaríamos então que essa nossa função se transforme em uma função &lt;code&gt;assíncrona&lt;/code&gt;. Mas como?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Como Fazer Uma Rota De GET No NodeJS</title>
    <link href="https://backefront.com.br/como-fazer-get-nodejs/"/>
    <id>https://backefront.com.br/como-fazer-get-nodejs/</id>
    <published>2020-02-17T10:33:05.000Z</published>
    <updated>2020-03-03T16:35:24.632Z</updated>
    
    <content type="html"><![CDATA[<p>Continuando a série sobre NodeJS, hoje irei mostrar como podemos fazer uma rota de GET com ele!<br>Caso tenha perdido, você pode ler sobre como criar uma rota de POST <a href="https://backefront.com.br/como-fazer-post-nodejs/">neste link aqui</a></p><p>Em nosso arquivo <code>index.js</code> iremos criar então as configurações desta nova rota:</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = express();</span><br><span class="line">server.use(express.json());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A variável `projects` pode ser `const` porque um `array`</span></span><br><span class="line"><span class="comment"> * pode receber adições ou exclusões mesmo sendo uma constante.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> projects = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">"Um novo post"</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">'/projects'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> res.json(projects);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">4000</span>);</span><br></pre></td></tr></table></figure><p>A nossa rota GET é bem simples, ela irá nos retornar todos os projetos que armazenamos.<br>Se testarmos a nossa rota criada anteriormente, fazendo um POST e depois requisitarmos todos os projetos através desta nova rota, devemos ver o projeto recém criado!</p><p>Mas como faríamos se quiséssemos pegar um ID vindo da URL para fazer a consulta?<br>Não mudaria muito, a diferença que usaríamos os parâmetros de rota:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> projects = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">"Um novo post"</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Aqui definimos que depois de projects</span></span><br><span class="line"><span class="comment"> * teremos um valor que será enviado na URL</span></span><br><span class="line"><span class="comment"> * e o chamamos de ID.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">server.get(<span class="string">'/projects/:id'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = req.params;</span><br><span class="line">  <span class="keyword">const</span> project = projects.find(<span class="function"><span class="params">project</span> =&gt;</span> project.id == id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res.json(projects);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">4000</span>);</span><br></pre></td></tr></table></figure><p>Com isso, pegamos o ID vindo da URL e buscamos em todos os projetos, retornando apenas o projeto que for igual ao ID enviado!<br>Simples não é mesmo?</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Continuando a série sobre NodeJS, hoje irei mostrar como podemos fazer uma rota de GET com ele!&lt;br&gt;Caso tenha perdido, você pode ler sobre como criar uma rota de POST &lt;a href=&quot;https://backefront.com.br/como-fazer-post-nodejs/&quot;&gt;neste link aqui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Em nosso arquivo &lt;code&gt;index.js&lt;/code&gt; iremos criar então as configurações desta nova rota:&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
      <category term="NodeJS" scheme="https://backefront.com.br/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Como Fazer POST No NodeJS</title>
    <link href="https://backefront.com.br/como-fazer-post-nodejs/"/>
    <id>https://backefront.com.br/como-fazer-post-nodejs/</id>
    <published>2020-02-10T11:36:03.000Z</published>
    <updated>2020-03-03T16:35:24.632Z</updated>
    
    <content type="html"><![CDATA[<p>Quando falamos de desenvolvimento de um sistema logo nos vem na cabeça consumo de API, integração com back-end, etc.</p><p>Back-end é o que temos por trás de nossa aplicação, é onde estará concentrada a lógica do sistema, onde ocorrerá a comunicação entre o front-end com o banco de dados.<br>Neste post, vamos mostrar como criar um POST com NodeJS!</p><a id="more"></a><p>NodeJS é uma tecnologia que podemos utilizar como back-end, que usa o Javascript como síntaxe.</p><p>Vamos criar então, a nossa primeira API! </p><p>Na pasta onde deseja guardar o projeto, vamos iniciar um projeto novo, rodando:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init -y</span><br></pre></td></tr></table></figure><p>Ou caso esteja usando NPM:<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></p><p>Agora temos nosso arquivo <code>package.json</code> criado, vamos instalar a dependência <code>express</code>:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br><span class="line"></span><br><span class="line">// ou</span><br><span class="line"></span><br><span class="line">yarn add express</span><br></pre></td></tr></table></figure><p>Agora sim, temos tudo pronto para iniciarmos! Vamos criar um arquivo chamado <code>index.js</code> e adicionaremos o seguinte trecho de código:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = express();</span><br><span class="line">server.use(express.json());</span><br><span class="line">server.listen(<span class="number">4000</span>);</span><br></pre></td></tr></table></figure><p>Feito isso, se rodarmos em nosso terminal <code>node index.js</code>, já teremos nosso servidor sendo executado!</p><p>Vamos deixar um objeto mockado, representando o nosso banco de dados</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = express();</span><br><span class="line">server.use(express.json());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A variável `projects` pode ser `const` porque um `array`</span></span><br><span class="line"><span class="comment"> * pode receber adições ou exclusões mesmo sendo uma constante.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> projects = [];</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">4000</span>);</span><br></pre></td></tr></table></figure><p>Agora, vamos criar a nossa rota POST!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Código anterior</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Request body: id, title</span></span><br><span class="line"><span class="comment"> * Cadastra um novo projeto</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">server.post(<span class="string">'/projects'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id, title &#125; = req.body;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> project = &#123;</span><br><span class="line">    id,</span><br><span class="line">    title</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  projects.push(project);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res.json(project);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Nesta rota, devemos passar dentro do body <code>id</code> e <code>title</code>!<br>Como podemos testar? Vamos usar o <a href="https://insomnia.rest/" target="_blank" rel="noopener">Insomnia</a></p><p>Para testar nossa rota, devemos criar uma nova requisição do tipo POST, alterar a URL e adicionarmos nosso body, o que deve ficar da seguinte forma:</p><p><img src="/posts/insomnia.png" alt="POST - Cadastrar projetos"></p><p>Pronto! Nossa primeira rota POST foi criada com sucesso!<br>Nos próximos posts, falarei sobre os outros métodos e como podemos criá-los na nossa API!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Quando falamos de desenvolvimento de um sistema logo nos vem na cabeça consumo de API, integração com back-end, etc.&lt;/p&gt;
&lt;p&gt;Back-end é o que temos por trás de nossa aplicação, é onde estará concentrada a lógica do sistema, onde ocorrerá a comunicação entre o front-end com o banco de dados.&lt;br&gt;Neste post, vamos mostrar como criar um POST com NodeJS!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="NodeJS" scheme="https://backefront.com.br/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Como Fazer Upload De Arquivos Pelo React</title>
    <link href="https://backefront.com.br/como-fazer-upload-arquivo-react/"/>
    <id>https://backefront.com.br/como-fazer-upload-arquivo-react/</id>
    <published>2020-02-03T09:42:23.000Z</published>
    <updated>2020-03-03T16:35:24.632Z</updated>
    
    <content type="html"><![CDATA[<p>Quando desenvolvemos formulários em nossos sistemas, as vezes nos deparamos com situações em que precisamos fazer anexos de arquivos.</p><p>Dessa forma, devemos criar um <code>input type=file</code> e permitir que o nosso usuário consiga subir o que tiver que subir!</p><p>Mas como podemos fazer isso, no React?</p><a id="more"></a><p>Primeiramente, vamos criar no input:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;label className=<span class="string">"form-label"</span>&gt;File&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">  &lt;input </span></span><br><span class="line"><span class="regexp">      type="file" </span></span><br><span class="line"><span class="regexp">      accept="application/</span>pdf<span class="string">"    </span></span><br><span class="line"><span class="string">  /&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>Feito isso, devemos agora criar a nossa função que vai detectar quando adicionarmos algum arquivo:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Usamos hooks para controlar o estado</span></span><br><span class="line"><span class="keyword">const</span> [cardFile, setCardFile] = useState();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleUploadFile = <span class="function">(<span class="params">e: any</span>) =&gt;</span> setCardFile(e.target.files[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;label className=<span class="string">"form-label"</span>&gt;File&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">  &lt;input </span></span><br><span class="line"><span class="regexp">      type="file" </span></span><br><span class="line"><span class="regexp">      onChange=&#123;handleUploadFile&#125;</span></span><br><span class="line"><span class="regexp">      accept="application/</span>pdf<span class="string">"    </span></span><br><span class="line"><span class="string">  /&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>Perfeito! Agora temos o arquivo em nossas mãos, podemos enviar para o nosso back-end!</p><p>Vamos agora trabalhar com FormData, que é uma forma de construirmos facilmente um conjunto de pares de chave/valor.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addNewCard = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    setSaving(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line">    data.append(<span class="string">'card'</span>, cardFile);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// Inserimos aqui nossa chamada POST/PUT</span></span><br><span class="line">    <span class="comment">// para enviarmos nosso arquivo.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dessa forma, conseguimos enviar arquivos pelo nosso front para o back!</p><p>Caso você precise validar um tipo de extensão específica, <a href="https://backefront.com.br/como-limitar-tipo-arquivo-upload-html/">neste post</a> demonstrei como podemos fazer isso também pelo HTML!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Quando desenvolvemos formulários em nossos sistemas, as vezes nos deparamos com situações em que precisamos fazer anexos de arquivos.&lt;/p&gt;
&lt;p&gt;Dessa forma, devemos criar um &lt;code&gt;input type=file&lt;/code&gt; e permitir que o nosso usuário consiga subir o que tiver que subir!&lt;/p&gt;
&lt;p&gt;Mas como podemos fazer isso, no React?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="React" scheme="https://backefront.com.br/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Como Limitar O Usuário a Escolher Um Tipo De Arquivo No HTML</title>
    <link href="https://backefront.com.br/como-limitar-tipo-arquivo-upload-html/"/>
    <id>https://backefront.com.br/como-limitar-tipo-arquivo-upload-html/</id>
    <published>2020-01-27T11:30:09.000Z</published>
    <updated>2020-03-03T16:35:24.632Z</updated>
    
    <content type="html"><![CDATA[<p>Em nosso dia a dia de desenvolvimento, as vezes precisamos fazer upload de arquivos, como imagens, PDFs, etc.<br>Esses arquivos, muitas das vezes, queremos que seja apenas de um determinado tipo, apenas um tipo de arquivo!<br>Você sabe como limitar extensão de um arquivo, pelo HTML?</p><a id="more"></a><p>Para limitarmos o tipo de arquivo que será aceito pela nossa interface, basta alterarmos uma propriedade no nosso <code>input file</code>:</p><h3 id="Limitando-apenas-imagens"><a href="#Limitando-apenas-imagens" class="headerlink" title="Limitando apenas imagens"></a>Limitando apenas imagens</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">multiple</span> <span class="attr">accept</span>=<span class="string">'image/*'</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Limitando-apenas-PDFs"><a href="#Limitando-apenas-PDFs" class="headerlink" title="Limitando apenas PDFs"></a>Limitando apenas PDFs</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">multiple</span> <span class="attr">accept</span>=<span class="string">'application/pdf'</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Limitando-apenas-arquivos-de-texto"><a href="#Limitando-apenas-arquivos-de-texto" class="headerlink" title="Limitando apenas arquivos de texto"></a>Limitando apenas arquivos de texto</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">multiple</span> <span class="attr">accept</span>=<span class="string">'application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document'</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Com isso, podemos limitar que o usuário veja apenas um tipo de extensão de arquivo, através de nossa interface!<br>O ideal é que mesmo limitando isso, ainda verificarmos se é realmente aquele tipo pelo Javascript e se possível, verificar no back-end também!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Em nosso dia a dia de desenvolvimento, as vezes precisamos fazer upload de arquivos, como imagens, PDFs, etc.&lt;br&gt;Esses arquivos, muitas das vezes, queremos que seja apenas de um determinado tipo, apenas um tipo de arquivo!&lt;br&gt;Você sabe como limitar extensão de um arquivo, pelo HTML?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="HTML" scheme="https://backefront.com.br/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Como Verificar Se Um Número É Primo Ou Não Com Javascript</title>
    <link href="https://backefront.com.br/verificar-numero-primo-js/"/>
    <id>https://backefront.com.br/verificar-numero-primo-js/</id>
    <published>2020-01-20T10:28:01.000Z</published>
    <updated>2020-03-03T16:35:24.632Z</updated>
    
    <content type="html"><![CDATA[<p>Por definição, temos que um número primo é aquele número onde ele é divisível apenas por 1 e por ele mesmo.<br>Como exemplo, os primeiros números primos são: 2, 3, 5, 7 e assim por diante.</p><p>Um exercício de lógica muito comum pedido é verificar se um dado número é primo ou não.<br>Você sabe então, como validar, utilizando Javascript?</p><a id="more"></a><p>Para verificar, podemos utilizar um algoritmo bem curto:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isPrime = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; num; i++)</span><br><span class="line">    <span class="keyword">if</span>(num % i === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">return</span> num &gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Com essa simples função, conseguimos verificar se o número é primo ou não! Esse tipo de questão é muitas das vezes pedido em testes de entrevistas, provas de faculdades, ou até mesmo, em alguma determinada situação em nossos trabalhos!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Por definição, temos que um número primo é aquele número onde ele é divisível apenas por 1 e por ele mesmo.&lt;br&gt;Como exemplo, os primeiros números primos são: 2, 3, 5, 7 e assim por diante.&lt;/p&gt;
&lt;p&gt;Um exercício de lógica muito comum pedido é verificar se um dado número é primo ou não.&lt;br&gt;Você sabe então, como validar, utilizando Javascript?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Evite Usar Push Em Objetos No Javascript</title>
    <link href="https://backefront.com.br/evite-usar-push-javascript/"/>
    <id>https://backefront.com.br/evite-usar-push-javascript/</id>
    <published>2020-01-13T09:21:55.000Z</published>
    <updated>2020-03-03T16:35:24.632Z</updated>
    
    <content type="html"><![CDATA[<p>No Javascript quando passamos um objeto/array em uma função, como parâmetro, passamos ela como <strong>referência</strong>.<br>Quando realizamos alguma operação que altera, como por exemplo, adicionar um elemento novo ao objeto e utilizamos <code>push</code>, estamos alterando diretamente aquele objeto que passamos apenas como referência!</p><p>Qual a consequência disso? Caso uma outra função esteja utilizando o mesmo objeto, será afetado pela ação de adicionar!</p><p>Então, pensando nisso, a melhor alternativa é sempre retornarmos uma cópia do objeto!<br>E para isso podemos utilizar o <a href="https://backefront.com.br/como-juntar-arrays-javascript/"><code>spread operator</code></a></p><a id="more"></a><p>Vamos utilizar como exemplo uma função que adicione um nome na lista:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">listaNomes = [<span class="string">'Victor'</span>, <span class="string">'Lo Ruanda'</span>, <span class="string">'João'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addName = <span class="function">(<span class="params">listaNomes, nome</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [...listaNomes, nome]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">addName(listaNomes, <span class="string">'Vicenzo'</span>);</span><br><span class="line"><span class="comment">// Retorno: ['Victor', 'Lo Ruanda', 'João', 'Vicenzo']</span></span><br></pre></td></tr></table></figure><p>Agora com essa função, estamos retornando um novo objeto e não mais alterando o objeto que foi nos passado!<br>Caso queira deixar essa função em apenas uma linha, você pode fazer a seguinte alteração:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addName = <span class="function">(<span class="params">listaNomes, nome</span>) =&gt;</span> [...listaNomes, nome];</span><br><span class="line"></span><br><span class="line">addName(listaNomes, <span class="string">'Vicenzo'</span>);</span><br><span class="line"><span class="comment">// Retorno: ['Victor', 'Lo Ruanda', 'João', 'Vicenzo']</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;No Javascript quando passamos um objeto/array em uma função, como parâmetro, passamos ela como &lt;strong&gt;referência&lt;/strong&gt;.&lt;br&gt;Quando realizamos alguma operação que altera, como por exemplo, adicionar um elemento novo ao objeto e utilizamos &lt;code&gt;push&lt;/code&gt;, estamos alterando diretamente aquele objeto que passamos apenas como referência!&lt;/p&gt;
&lt;p&gt;Qual a consequência disso? Caso uma outra função esteja utilizando o mesmo objeto, será afetado pela ação de adicionar!&lt;/p&gt;
&lt;p&gt;Então, pensando nisso, a melhor alternativa é sempre retornarmos uma cópia do objeto!&lt;br&gt;E para isso podemos utilizar o &lt;a href=&quot;https://backefront.com.br/como-juntar-arrays-javascript/&quot;&gt;&lt;code&gt;spread operator&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Como Fazer Um POST Com Javascript Puro</title>
    <link href="https://backefront.com.br/como-fazer-post-javascript-puro/"/>
    <id>https://backefront.com.br/como-fazer-post-javascript-puro/</id>
    <published>2020-01-06T11:34:45.000Z</published>
    <updated>2020-03-03T16:35:24.632Z</updated>
    
    <content type="html"><![CDATA[<p>Com a evolução do Javascript, fazer uma request com Javascript tornou-se uma tarefa muito mais simples!<br>O que antes nós usávamos JQuery para facilitar nosso trabalho, atualmente é algo relativamente fácil e tranquilo de ser feito através de javascript puro.</p><p>Você sabe como fazer uma requisição “POST” com Javascript puro?</p><a id="more"></a><p>Quando queremos fazer um POST com Javascript puro, podemos usar o <code>fetch API</code>, que é uma interface para fazermos requisições!<br>Então como fazemos um POST com o fetch? Podemos fazer da seguinte maneira:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">username</span>: <span class="string">'Victor Jordan'</span> &#125;;</span><br><span class="line"></span><br><span class="line">fetch(<span class="string">'https://backefront.com.br/api/users'</span>, &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Success:'</span>, data);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>O Fetch nos permite trabalhar com todos os métodos HTTP, sendo eles: GET, POST, PUT, DELETE, etc.<br>Sua implementação é bem simples e intuitiva, o que facilita muito em nosso desenvolvimento!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Com a evolução do Javascript, fazer uma request com Javascript tornou-se uma tarefa muito mais simples!&lt;br&gt;O que antes nós usávamos JQuery para facilitar nosso trabalho, atualmente é algo relativamente fácil e tranquilo de ser feito através de javascript puro.&lt;/p&gt;
&lt;p&gt;Você sabe como fazer uma requisição “POST” com Javascript puro?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Front-end" scheme="https://backefront.com.br/tags/Front-end/"/>
    
      <category term="Javascript" scheme="https://backefront.com.br/tags/Javascript/"/>
    
  </entry>
  
</feed>
